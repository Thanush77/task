var config={development:{API_BASE_URL:"http://localhost:3001/api",DEBUG:true,LOG_LEVEL:"debug"},production:{API_BASE_URL:"https://tasks.api.guardianenviro.co.in/api",DEBUG:false,LOG_LEVEL:"error"}};var environment=window.location.hostname==="localhost"||window.location.hostname==="127.0.0.1"?"development":"production";window.APP_CONFIG=config[environment];console.log("APP_CONFIG:",window.APP_CONFIG);class AuthManager{constructor(){this.currentUser=null;this.authToken=localStorage.getItem("authToken");this.isLoading=false;this.init()}init(){this.loadSavedUser();this.setupEventListeners();this.setupTokenRefresh();this.handleAuthStateChange()}loadSavedUser(){const savedUser=localStorage.getItem("user");if(savedUser&&this.authToken){try{this.currentUser=JSON.parse(savedUser);console.log("üë§ Loaded saved user:",this.currentUser.username)}catch(error){console.error("Failed to parse saved user data:",error);this.clearAuthData()}}}setupEventListeners(){window.addEventListener("authTokenChanged",event=>{this.authToken=event.detail.token});window.addEventListener("authExpired",()=>{this.handleAuthExpired()});this.setupFormListeners();this.setupPasswordValidation()}setupFormListeners(){const loginForm=document.getElementById("loginForm");if(loginForm){loginForm.addEventListener("submit",e=>{e.preventDefault();this.handleLogin()})}const registerForm=document.getElementById("registerForm");if(registerForm){registerForm.addEventListener("submit",e=>{e.preventDefault();this.handleRegister()})}const profileForm=document.getElementById("profileForm");if(profileForm){profileForm.addEventListener("submit",e=>{e.preventDefault();this.handleProfileUpdate()})}}setupPasswordValidation(){const passwordInput=document.getElementById("regPassword");const requirementsDiv=document.getElementById("passwordRequirements");if(passwordInput&&requirementsDiv){passwordInput.addEventListener("input",()=>{const password=passwordInput.value;this.validatePassword(password)});passwordInput.addEventListener("focus",()=>{requirementsDiv.style.display="block"});passwordInput.addEventListener("blur",()=>{setTimeout(()=>{if(passwordInput.value){requirementsDiv.style.display="none"}},200)})}}validatePassword(password){const requirements={length:password.length>=8,uppercase:/[A-Z]/.test(password),lowercase:/[a-z]/.test(password),number:/\d/.test(password)};this.updateRequirement("req-length",requirements.length);this.updateRequirement("req-uppercase",requirements.uppercase);this.updateRequirement("req-lowercase",requirements.lowercase);this.updateRequirement("req-number",requirements.number);return Object.values(requirements).every(req=>req)}updateRequirement(elementId,isValid){const element=document.getElementById(elementId);if(element){element.className=isValid?"valid":""}}setupTokenRefresh(){setInterval(()=>{if(this.isAuthenticated()){this.refreshToken()}},6*60*60*1e3)}handleAuthStateChange(){if(this.isAuthenticated()){this.showApplication()}else{this.showAuthentication()}}async handleLogin(){const username=document.getElementById("loginUsername").value.trim();const password=document.getElementById("loginPassword").value;if(!username||!password){this.showAuthError("Please enter both username and password.");return}this.setLoadingState("loginBtn",true,"Signing In...");this.hideAuthMessages();try{const response=await window.api.login({username:username,password:password});this.currentUser=response.user;localStorage.setItem("user",JSON.stringify(this.currentUser));this.showAuthSuccess("Welcome back! Redirecting...");setTimeout(()=>{this.showApplication();this.initializeApplication()},1e3)}catch(error){console.error("Login error:",error);this.showAuthError(error.getUserMessage())}finally{this.setLoadingState("loginBtn",false,"Sign In")}}async handleRegister(){const fullName=document.getElementById("regFullName").value.trim();const username=document.getElementById("regUsername").value.trim();const email=document.getElementById("regEmail").value.trim();const password=document.getElementById("regPassword").value;if(!fullName||!username||!email||!password){this.showAuthError("Please fill in all fields.");return}if(!this.validateEmail(email)){this.showAuthError("Please enter a valid email address.");return}if(!this.validatePassword(password)){this.showAuthError("Password does not meet the requirements.");return}this.setLoadingState("registerBtn",true,"Creating Account...");this.hideAuthMessages();try{const response=await window.api.register({fullName:fullName,username:username,email:email,password:password});this.currentUser=response.user;localStorage.setItem("user",JSON.stringify(this.currentUser));this.showAuthSuccess("Account created successfully! Redirecting...");setTimeout(()=>{this.showApplication();this.initializeApplication()},1e3)}catch(error){console.error("Registration error:",error);this.showAuthError(error.getUserMessage())}finally{this.setLoadingState("registerBtn",false,"Create Account")}}async handleProfileUpdate(){const fullName=document.getElementById("profileFullName").value.trim();const email=document.getElementById("profileEmail").value.trim();if(!fullName||!email){window.showNotification("Please fill in all fields.","error");return}if(!this.validateEmail(email)){window.showNotification("Please enter a valid email address.","error");return}try{const response=await window.api.updateProfile({fullName:fullName,email:email});this.currentUser=response.user;localStorage.setItem("user",JSON.stringify(this.currentUser));this.updateUserDisplay();window.showNotification("Profile updated successfully!","success");window.closeProfileModal()}catch(error){console.error("Profile update error:",error);window.showNotification(error.getUserMessage(),"error")}}async logout(){try{this.clearAuthData();this.showLoadingScreen();if(window.requestCache){window.requestCache.clear()}setTimeout(()=>{this.showAuthentication();this.hideLoadingScreen()},500);console.log("üëã User logged out successfully")}catch(error){console.error("Logout error:",error);this.clearAuthData();this.showAuthentication()}}async refreshToken(){if(!this.authToken)return;try{await window.api.refreshToken();console.log("üîÑ Token refreshed successfully")}catch(error){console.error("Token refresh failed:",error);this.handleAuthExpired()}}handleAuthExpired(){console.log("üîê Authentication expired");this.clearAuthData();this.showAuthentication();window.showNotification("Your session has expired. Please login again.","warning")}clearAuthData(){this.currentUser=null;this.authToken=null;localStorage.removeItem("authToken");localStorage.removeItem("user");window.api.clearAuthToken()}showAuthentication(){document.getElementById("loadingScreen").style.display="none";document.getElementById("authContainer").style.display="flex";document.getElementById("appContainer").style.display="none";document.getElementById("createTaskFab").style.display="none";this.resetAuthForms();this.hideAuthMessages()}showApplication(){document.getElementById("loadingScreen").style.display="none";document.getElementById("authContainer").style.display="none";document.getElementById("appContainer").style.display="flex";document.getElementById("createTaskFab").style.display="block";this.updateUserDisplay()}showLoadingScreen(){document.getElementById("loadingScreen").style.display="flex";document.getElementById("authContainer").style.display="none";document.getElementById("appContainer").style.display="none";document.getElementById("createTaskFab").style.display="none"}hideLoadingScreen(){document.getElementById("loadingScreen").style.display="none"}async initializeApplication(){if(window.taskManager){await window.taskManager.init()}}updateUserDisplay(){if(!this.currentUser)return;const userName=document.getElementById("userName");const userFullName=document.getElementById("userFullName");const userAvatar=document.getElementById("userAvatar");if(userName){userName.textContent=this.currentUser.fullName||this.currentUser.full_name||this.currentUser.username}if(userFullName){userFullName.textContent=this.currentUser.fullName||this.currentUser.full_name||this.currentUser.username}if(userAvatar){const name=this.currentUser.fullName||this.currentUser.full_name||this.currentUser.username;userAvatar.textContent=name.charAt(0).toUpperCase()}this.updateProfileForm()}updateProfileForm(){const profileFullName=document.getElementById("profileFullName");const profileEmail=document.getElementById("profileEmail");if(profileFullName&&this.currentUser){profileFullName.value=this.currentUser.fullName||this.currentUser.full_name||""}if(profileEmail&&this.currentUser){profileEmail.value=this.currentUser.email||""}}resetAuthForms(){const loginForm=document.getElementById("loginForm");const registerForm=document.getElementById("registerForm");if(loginForm)loginForm.reset();if(registerForm)registerForm.reset()}showAuthError(message){const errorDiv=document.getElementById("authError");if(errorDiv){errorDiv.textContent=message;errorDiv.style.display="block"}}showAuthSuccess(message){const successDiv=document.getElementById("authSuccess");if(successDiv){successDiv.textContent=message;successDiv.style.display="block"}}hideAuthMessages(){const errorDiv=document.getElementById("authError");const successDiv=document.getElementById("authSuccess");if(errorDiv)errorDiv.style.display="none";if(successDiv)successDiv.style.display="none"}setLoadingState(buttonId,isLoading,loadingText="Loading..."){const button=document.getElementById(buttonId);if(!button)return;const textSpan=button.querySelector(".btn-text");const loaderSpan=button.querySelector(".btn-loader");if(isLoading){button.disabled=true;if(textSpan)textSpan.style.display="none";if(loaderSpan){loaderSpan.style.display="flex";loaderSpan.innerHTML=`<div class="spinner"></div>${loadingText}`}}else{button.disabled=false;if(textSpan)textSpan.style.display="block";if(loaderSpan)loaderSpan.style.display="none"}}validateEmail(email){const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;return emailRegex.test(email)}isAuthenticated(){return!!(this.authToken&&this.currentUser)}getCurrentUser(){return this.currentUser}hasRole(role){return this.currentUser?.role===role}isAdmin(){return this.hasRole("admin")}getUserInitials(){if(!this.currentUser)return"U";const name=this.currentUser.fullName||this.currentUser.full_name||this.currentUser.username;return name.split(" ").map(n=>n.charAt(0)).join("").toUpperCase().slice(0,2)}}window.showLoginForm=function(){document.getElementById("loginForm").style.display="block";document.getElementById("registerForm").style.display="none";document.getElementById("authError").style.display="none";document.getElementById("authSuccess").style.display="none"};window.showRegisterForm=function(){document.getElementById("loginForm").style.display="none";document.getElementById("registerForm").style.display="block";document.getElementById("authError").style.display="none";document.getElementById("authSuccess").style.display="none"};window.logout=function(){if(window.authManager){window.authManager.logout()}};window.toggleUserMenu=function(){const menu=document.getElementById("userMenu");if(menu){menu.classList.toggle("show")}};window.showProfileModal=function(){const modal=document.getElementById("profileModal");if(modal){if(window.authManager){window.authManager.updateProfileForm()}modal.classList.add("active")}const userMenu=document.getElementById("userMenu");if(userMenu){userMenu.classList.remove("show")}};window.closeProfileModal=function(){const modal=document.getElementById("profileModal");if(modal){modal.classList.remove("active")}};document.addEventListener("click",e=>{const userMenu=document.getElementById("userMenu");const menuBtn=document.querySelector(".menu-btn");if(userMenu&&!userMenu.contains(e.target)&&!menuBtn.contains(e.target)){userMenu.classList.remove("show")}});if(typeof module!=="undefined"&&module.exports){module.exports=AuthManager}class APIClient{constructor(){this.baseURL=this.getBaseURL();this.authToken=localStorage.getItem("authToken");this.setupInterceptors()}getBaseURL(){return window.APP_CONFIG.API_BASE_URL}setupInterceptors(){window.addEventListener("authTokenChanged",event=>{this.authToken=event.detail.token})}async request(endpoint,options={}){const url=`${this.baseURL}${endpoint}`;const config={headers:{"Content-Type":"application/json",...options.headers},...options};if(this.authToken){config.headers.Authorization=`Bearer ${this.authToken}`}try{console.log(`üåê ${config.method||"GET"} ${url}`);const response=await fetch(url,config);const contentType=response.headers.get("content-type");let data;if(contentType&&contentType.includes("application/json")){data=await response.json()}else{data=await response.text()}if(!response.ok){if(response.status===401){this.handleUnauthorized();throw new APIError("Session expired. Please login again.",401,data)}if(response.status===403){throw new APIError("Permission denied.",403,data)}if(response.status===404){throw new APIError("Resource not found.",404,data)}if(response.status>=500){throw new APIError("Server error. Please try again later.",response.status,data)}const errorMessage=data?.error||data?.message||"Request failed";throw new APIError(errorMessage,response.status,data)}console.log(`‚úÖ ${config.method||"GET"} ${url} - Success`);return data}catch(error){console.error(`‚ùå ${config.method||"GET"} ${url} - Error:`,error);if(error instanceof TypeError&&error.message.includes("fetch")){throw new APIError("Network error. Please check your connection.",0)}if(error instanceof APIError){throw error}throw new APIError("An unexpected error occurred.",0,error)}}handleUnauthorized(){this.authToken=null;localStorage.removeItem("authToken");localStorage.removeItem("user");window.dispatchEvent(new CustomEvent("authExpired"))}async get(endpoint,params={}){const url=new URL(`${this.baseURL}${endpoint}`);Object.keys(params).forEach(key=>{if(params[key]!==undefined&&params[key]!==null){url.searchParams.append(key,params[key])}});return this.request(endpoint+url.search,{method:"GET"})}async post(endpoint,data={}){return this.request(endpoint,{method:"POST",body:JSON.stringify(data)})}async put(endpoint,data={}){return this.request(endpoint,{method:"PUT",body:JSON.stringify(data)})}async delete(endpoint){return this.request(endpoint,{method:"DELETE"})}async patch(endpoint,data={}){return this.request(endpoint,{method:"PATCH",body:JSON.stringify(data)})}async upload(endpoint,formData){const config={method:"POST",body:formData};if(this.authToken){config.headers={Authorization:`Bearer ${this.authToken}`}}return this.request(endpoint,config)}async register(userData){const response=await this.post("/auth/register",userData);if(response.token){this.setAuthToken(response.token)}return response}async login(credentials){const response=await this.post("/auth/login",credentials);if(response.token){this.setAuthToken(response.token)}return response}async getProfile(){return this.get("/auth/profile")}async updateProfile(profileData){return this.put("/auth/profile",profileData)}async changePassword(passwordData){return this.put("/auth/change-password",passwordData)}async refreshToken(){const response=await this.post("/auth/refresh");if(response.token){this.setAuthToken(response.token)}return response}async getTasks(filters={}){return this.get("/tasks",filters)}async getTask(taskId){return this.get(`/tasks/${taskId}`)}async createTask(taskData){return this.post("/tasks",taskData)}async updateTask(taskId,taskData){return this.put(`/tasks/${taskId}`,taskData)}async deleteTask(taskId){return this.delete(`/tasks/${taskId}`)}async getTaskStats(){return this.get("/tasks/stats")}async getUsers(options={}){return this.get("/users",options)}async getUser(userId){return this.get(`/users/${userId}`)}async updateUser(userId,userData){return this.put(`/users/${userId}`,userData)}async getDashboardStats(){return this.get("/users/dashboard/stats")}async getUserTasks(userId,filters={}){return this.get(`/users/${userId}/tasks`,filters)}setAuthToken(token){this.authToken=token;localStorage.setItem("authToken",token);window.dispatchEvent(new CustomEvent("authTokenChanged",{detail:{token:token}}))}clearAuthToken(){this.authToken=null;localStorage.removeItem("authToken");localStorage.removeItem("user");window.dispatchEvent(new CustomEvent("authTokenChanged",{detail:{token:null}}))}isAuthenticated(){return!!this.authToken}getAuthToken(){return this.authToken}async healthCheck(){try{const response=await fetch(`${this.baseURL}/health`);return response.ok}catch(error){console.error("Health check failed:",error);return false}}async testConnection(){try{const response=await this.get("/health");return{status:"connected",serverTime:response.timestamp,uptime:response.uptime}}catch(error){return{status:"disconnected",error:error.message}}}}class APIError extends Error{constructor(message,status=0,data=null){super(message);this.name="APIError";this.status=status;this.data=data}isNetworkError(){return this.status===0}isClientError(){return this.status>=400&&this.status<500}isServerError(){return this.status>=500}isUnauthorized(){return this.status===401}isForbidden(){return this.status===403}isNotFound(){return this.status===404}getUserMessage(){if(this.isNetworkError()){return"Please check your internet connection and try again."}if(this.isUnauthorized()){return"Your session has expired. Please login again."}if(this.isForbidden()){return"You don't have permission to perform this action."}if(this.isNotFound()){return"The requested resource was not found."}if(this.isServerError()){return"Server error. Please try again later."}return this.message||"An unexpected error occurred."}}class RequestCache{constructor(ttl=5*60*1e3){this.cache=new Map;this.ttl=ttl}get(key){const cached=this.cache.get(key);if(!cached)return null;if(Date.now()-cached.timestamp>this.ttl){this.cache.delete(key);return null}return cached.data}set(key,data){this.cache.set(key,{data:data,timestamp:Date.now()})}clear(){this.cache.clear()}cleanup(){const now=Date.now();for(const[key,value]of this.cache.entries()){if(now-value.timestamp>this.ttl){this.cache.delete(key)}}}}window.api=new APIClient;window.requestCache=new RequestCache;setInterval(()=>{window.requestCache.cleanup()},10*60*1e3);if(typeof module!=="undefined"&&module.exports){module.exports={APIClient:APIClient,APIError:APIError,RequestCache:RequestCache}}window.authManager=new AuthManager;class TaskManager{constructor(){this.tasks=[];this.users=[];this.currentFilters={};this.currentEditingTask=null;this.refreshInterval=null;this.notificationIntervals={};this.init=this.init.bind(this);this.loadTasks=this.loadTasks.bind(this);this.loadUsers=this.loadUsers.bind(this);this.loadDashboardStats=this.loadDashboardStats.bind(this);this.scheduleDeadlineNotifications=this.scheduleDeadlineNotifications.bind(this);this.clearAllNotificationIntervals=this.clearAllNotificationIntervals.bind(this)}async init(){try{console.log("üöÄ Initializing TaskManager...");await Promise.all([this.loadUsers(),this.loadTasks(),this.loadDashboardStats()]);this.setupEventListeners();this.setupAutoRefresh();console.log("‚úÖ TaskManager initialized successfully")}catch(error){console.error("‚ùå Failed to initialize TaskManager:",error);showNotification("Failed to load application data. Please refresh the page.","error")}}setupEventListeners(){const taskForm=document.getElementById("taskForm");if(taskForm){taskForm.addEventListener("submit",e=>{e.preventDefault();this.handleTaskSubmit()})}const searchInput=document.getElementById("searchTasks");if(searchInput){let searchTimeout;searchInput.addEventListener("input",()=>{clearTimeout(searchTimeout);searchTimeout=setTimeout(()=>this.filterTasks(),300)})}document.addEventListener("click",e=>{if(e.target.classList.contains("modal")){this.closeAllModals()}});document.addEventListener("keydown",e=>{this.handleKeyboardShortcuts(e)})}setupAutoRefresh(){this.refreshInterval=setInterval(async()=>{if(document.visibilityState==="visible"){await this.loadDashboardStats();const activeTab=document.querySelector(".tab-content.active");if(activeTab&&activeTab.id==="tasks"){await this.loadTasks()}}},3e4)}async loadUsers(){try{const response=await window.api.getUsers();this.users=response.users||response;this.populateUserSelects();this.renderTeamGrid();console.log(`üë• Loaded ${this.users.length} users`)}catch(error){console.error("‚ùå Failed to load users:",error);showNotification("Failed to load team members.","error")}}async loadTasks(){try{const response=await window.api.getTasks(this.currentFilters);this.tasks=response.tasks||response;this.renderTasks();this.scheduleDeadlineNotifications();console.log(`üìã Loaded ${this.tasks.length} tasks`)}catch(error){console.error("‚ùå Failed to load tasks:",error);this.renderTasksError();showNotification("Failed to load tasks.","error")}}async loadDashboardStats(){try{const stats=await window.api.getDashboardStats();this.updateDashboard(stats)}catch(error){console.error("‚ùå Failed to load dashboard stats:",error)}}populateUserSelects(){const selects=document.querySelectorAll("#taskAssignTo");selects.forEach(select=>{select.innerHTML='<option value="">Select team member</option>';this.users.forEach(user=>{const option=document.createElement("option");option.value=user.id;const isCurrentUser=window.authManager.getCurrentUser()?.id===user.id;option.textContent=`${user.full_name} ${isCurrentUser?"(Me)":""}`;select.appendChild(option)})})}async handleTaskSubmit(){try{const taskData=this.getTaskFormData();if(!taskData.title.trim()){showNotification("Task title is required.","error");return}if(!taskData.assignedTo){showNotification("Please select a team member to assign the task.","error");return}this.setTaskFormLoading(true);let response;let isNewTask=false;let assignedUserId=taskData.assignedTo;let assignedUserName="";if(this.currentEditingTask){response=await window.api.updateTask(this.currentEditingTask.id,taskData);showNotification("Task updated successfully!","success");if(this.currentEditingTask.assigned_to!==assignedUserId){assignedUserName=this.users.find(u=>u.id===assignedUserId)?.full_name||"";this.notifyTaskAssignment(taskData.title,assignedUserId,assignedUserName)}}else{response=await window.api.createTask(taskData);showNotification("Task created successfully!","success");isNewTask=true;assignedUserName=this.users.find(u=>u.id===assignedUserId)?.full_name||"";this.notifyTaskAssignment(taskData.title,assignedUserId,assignedUserName)}await Promise.all([this.loadTasks(),this.loadDashboardStats()]);this.closeTaskModal()}catch(error){console.error("‚ùå Task submit error:",error);showNotification(error.getUserMessage(),"error")}finally{this.setTaskFormLoading(false)}}getTaskFormData(){return{title:document.getElementById("taskTitle").value.trim(),description:document.getElementById("taskDescription").value.trim()||null,assignedTo:parseInt(document.getElementById("taskAssignTo").value)||null,priority:document.getElementById("taskPriority").value,category:document.getElementById("taskCategory").value,estimatedHours:parseFloat(document.getElementById("taskEstimatedHours").value)||1,startDate:document.getElementById("taskStartDate").value||null,dueDate:document.getElementById("taskDueDate").value||null,tags:document.getElementById("taskTags").value.split(",").map(tag=>tag.trim()).filter(tag=>tag)}}setTaskFormLoading(isLoading){const submitBtn=document.getElementById("taskSubmitBtn");if(!submitBtn)return;const textSpan=submitBtn.querySelector(".btn-text");const loaderSpan=submitBtn.querySelector(".btn-loader");if(isLoading){submitBtn.disabled=true;if(textSpan)textSpan.style.display="none";if(loaderSpan){loaderSpan.style.display="flex"}}else{submitBtn.disabled=false;if(textSpan)textSpan.style.display="block";if(loaderSpan)loaderSpan.style.display="none"}}async completeTask(taskId){try{await window.api.updateTask(taskId,{status:"completed"});const task=this.tasks.find(t=>t.id===taskId);if(task){task.status="completed";task.completed_at=(new Date).toISOString()}this.clearNotificationInterval(taskId);await Promise.all([this.loadTasks(),this.loadDashboardStats()]);showNotification("Task completed! üéâ","success")}catch(error){console.error("‚ùå Complete task error:",error);showNotification(error.getUserMessage(),"error")}}async deleteTask(taskId){if(!confirm("Are you sure you want to delete this task? This action cannot be undone.")){return}try{await window.api.deleteTask(taskId);this.tasks=this.tasks.filter(t=>t.id!==taskId);this.clearNotificationInterval(taskId);await Promise.all([this.loadTasks(),this.loadDashboardStats()]);showNotification("Task deleted successfully.","info")}catch(error){console.error("‚ùå Delete task error:",error);showNotification(error.getUserMessage(),"error")}}editTask(taskId){const task=this.tasks.find(t=>t.id===taskId);if(!task){showNotification("Task not found.","error");return}this.currentEditingTask=task;this.populateTaskForm(task);this.openTaskModal("Edit Task")}populateTaskForm(task){document.getElementById("taskTitle").value=task.title||"";document.getElementById("taskDescription").value=task.description||"";document.getElementById("taskAssignTo").value=task.assigned_to||"";document.getElementById("taskPriority").value=task.priority||"medium";document.getElementById("taskCategory").value=task.category||"general";document.getElementById("taskEstimatedHours").value=task.estimated_hours||1;if(task.start_date){document.getElementById("taskStartDate").value=this.formatDateTimeLocal(task.start_date)}if(task.due_date){document.getElementById("taskDueDate").value=this.formatDateTimeLocal(task.due_date)}const tags=task.tags?task.tags.filter(tag=>tag).join(", "):"";document.getElementById("taskTags").value=tags}formatDateTimeLocal(dateString){const date=new Date(dateString);const year=date.getFullYear();const month=String(date.getMonth()+1).padStart(2,"0");const day=String(date.getDate()).padStart(2,"0");const hours=String(date.getHours()).padStart(2,"0");const minutes=String(date.getMinutes()).padStart(2,"0");return`${year}-${month}-${day}T${hours}:${minutes}`}async filterTasks(){const statusFilter=document.getElementById("statusFilter").value;const priorityFilter=document.getElementById("priorityFilter").value;const searchQuery=document.getElementById("searchTasks").value.trim();this.currentFilters={};if(statusFilter)this.currentFilters.status=statusFilter;if(priorityFilter)this.currentFilters.priority=priorityFilter;await this.loadTasks();if(searchQuery){this.tasks=this.tasks.filter(task=>task.title.toLowerCase().includes(searchQuery.toLowerCase())||task.description&&task.description.toLowerCase().includes(searchQuery.toLowerCase())||task.assigned_to_name&&task.assigned_to_name.toLowerCase().includes(searchQuery.toLowerCase()))}this.renderTasks()}searchTasks(){this.filterTasks()}renderTasks(){const tasksList=document.getElementById("tasksList");if(!tasksList)return;const currentUser=window.authManager.getCurrentUser&&window.authManager.getCurrentUser();const assignedTasks=this.tasks.filter(task=>task.assigned_to===currentUser?.id);if(assignedTasks.length===0){tasksList.innerHTML=this.getEmptyTasksHTML();return}const tasksHTML=assignedTasks.map(task=>this.renderTask(task)).join("");tasksList.innerHTML=tasksHTML;assignedTasks.forEach(task=>{this.updateTimerDisplay(task.id)})}renderTask(task){const priorityClass=`priority-${task.priority}`;const dueDate=task.due_date?new Date(task.due_date).toLocaleDateString():"No due date";const assignedToName=task.assigned_to_name||"Unassigned";const tags=task.tags?task.tags.filter(tag=>tag).map(tag=>`<span class="task-tag">${this.escapeHtml(tag)}</span>`).join(""):"";const isCompleted=task.status==="completed";const canEdit=task.created_by===window.authManager.getCurrentUser()?.id||task.assigned_to===window.authManager.getCurrentUser()?.id;const timeControls=!isCompleted?`\n            <div class="task-timer" id="task-timer-${task.id}">\n                <span class="timer-display" id="timer-display-${task.id}">--:--:--</span>\n                <span class="timer-total" id="timer-total-${task.id}" style="margin-left:8px;font-size:0.9em;color:#888;">Total: --:--:--</span>\n                <button class="btn btn-small btn-primary" onclick="taskManager.startTimer(${task.id})">‚ñ∂Ô∏è Start</button>\n                <button class="btn btn-small btn-warning" onclick="taskManager.pauseTimer(${task.id})">‚è∏Ô∏è Pause</button>\n                <button class="btn btn-small btn-danger" onclick="taskManager.stopTimer(${task.id})">‚èπÔ∏è Stop</button>\n            </div>\n        `:"";return`\n            <div class="task-item ${priorityClass}" data-task-id="${task.id}">\n                <div class="task-header">\n                    <div class="task-title">${this.escapeHtml(task.title)}</div>\n                    <div class="task-priority ${priorityClass}">${task.priority}</div>\n                </div>\n                \n                ${task.description?`<div class="task-description">${this.escapeHtml(task.description)}</div>`:""}\n                \n                <div class="task-meta">\n                    <span>üë§ ${this.escapeHtml(assignedToName)}</span>\n                    <span>üìÖ ${dueDate}</span>\n                    <span>‚è±Ô∏è ${task.estimated_hours}h</span>\n                    <span>üìÇ ${this.escapeHtml(task.category)}</span>\n                    ${task.created_by_name?`<span>üë®‚Äçüíº Created by ${this.escapeHtml(task.created_by_name)}</span>`:""}\n                </div>\n                \n                ${tags?`<div class="task-tags">${tags}</div>`:""}\n                \n                <div class="task-actions">\n                    ${!isCompleted?`<button class="btn btn-success btn-small" onclick="taskManager.completeTask(${task.id})">\n                            ‚úÖ Complete\n                        </button>`:`<span style="color: var(--success-color); font-weight: 600;">‚úÖ Completed</span>`}\n                    ${canEdit?`<button class="btn btn-secondary btn-small" onclick="taskManager.editTask(${task.id})">\n                            ‚úèÔ∏è Edit\n                        </button>`:""}\n                    ${task.created_by===window.authManager.getCurrentUser()?.id?`<button class="btn btn-danger btn-small" onclick="taskManager.deleteTask(${task.id})">\n                            üóëÔ∏è Delete\n                        </button>`:""}\n                </div>\n                ${timeControls}\n            </div>\n        `}renderTasksError(){const tasksList=document.getElementById("tasksList");if(!tasksList)return;tasksList.innerHTML=`\n            <div class="empty-state">\n                <div style="font-size: 4rem; margin-bottom: 16px;">‚ùå</div>\n                <h3>Failed to Load Tasks</h3>\n                <p>There was an error loading your tasks. Please try refreshing the page.</p>\n                <button class="btn btn-primary" onclick="taskManager.loadTasks()" style="margin-top: 1rem;">\n                    üîÑ Retry\n                </button>\n            </div>\n        `}getEmptyTasksHTML(){const hasFilters=Object.keys(this.currentFilters).length>0||document.getElementById("searchTasks").value.trim();if(hasFilters){return`\n                <div class="empty-state">\n                    <div style="font-size: 4rem; margin-bottom: 16px;">üîç</div>\n                    <h3>No Tasks Found</h3>\n                    <p>No tasks match your current filters. Try adjusting your search criteria.</p>\n                    <button class="btn btn-secondary" onclick="taskManager.clearFilters()" style="margin-top: 1rem;">\n                        Clear Filters\n                    </button>\n                </div>\n            `}return`\n            <div class="empty-state">\n                <div style="font-size: 4rem; margin-bottom: 16px;">üìù</div>\n                <h3>No Tasks Yet</h3>\n                <p>Create your first task to get started with task management!</p>\n                <button class="btn btn-primary" onclick="openCreateTaskModal()" style="margin-top: 1rem;">\n                    ‚ûï Create First Task\n                </button>\n            </div>\n        `}clearFilters(){document.getElementById("statusFilter").value="";document.getElementById("priorityFilter").value="";document.getElementById("searchTasks").value="";this.currentFilters={};this.loadTasks()}updateDashboard(stats){const elements={totalTasks:document.getElementById("totalTasks"),completedTasks:document.getElementById("completedTasks"),inProgressTasks:document.getElementById("inProgressTasks"),assignedToMe:document.getElementById("assignedToMe"),assignedByMe:document.getElementById("assignedByMe"),timeToday:document.getElementById("timeToday")};Object.keys(elements).forEach(key=>{if(elements[key]&&stats[key]!==undefined){elements[key].textContent=stats[key]}});Object.values(elements).forEach(el=>{if(el){el.classList.add("animate-pulse");setTimeout(()=>el.classList.remove("animate-pulse"),1e3)}})}renderTeamGrid(){const teamGrid=document.getElementById("teamGrid");const teamCount=document.getElementById("teamCount");if(!teamGrid)return;if(teamCount){teamCount.textContent=this.users.length}if(this.users.length===0){teamGrid.innerHTML=`\n                <div class="empty-state">\n                    <div style="font-size: 4rem; margin-bottom: 16px;">üë•</div>\n                    <h3>No Team Members</h3>\n                    <p>No team members found.</p>\n                </div>\n            `;return}const membersHTML=this.users.map(user=>this.renderTeamMember(user)).join("");teamGrid.innerHTML=membersHTML}renderTeamMember(user){const initials=this.getUserInitials(user.full_name||user.username);const isCurrentUser=user.id===window.authManager.getCurrentUser()?.id;return`\n            <div class="team-member">\n                <div class="member-avatar">${initials}</div>\n                <div class="member-name">${this.escapeHtml(user.full_name||user.username)}</div>\n                <div class="member-email">${this.escapeHtml(user.email)}</div>\n                <div class="member-role">${this.escapeHtml(user.role||"User")}${isCurrentUser?" (You)":""}</div>\n            </div>\n        `}getUserInitials(name){return name.split(" ").map(n=>n.charAt(0)).join("").toUpperCase().slice(0,2)}handleKeyboardShortcuts(e){if((e.ctrlKey||e.metaKey)&&e.key==="n"){e.preventDefault();openCreateTaskModal()}if(e.key==="Escape"){this.closeAllModals()}if((e.ctrlKey||e.metaKey)&&e.key==="r"){e.preventDefault();this.refreshAll()}}async refreshAll(){const refreshIcon=document.getElementById("refreshIcon");if(refreshIcon){refreshIcon.style.animation="spin 1s linear infinite"}try{await Promise.all([this.loadUsers(),this.loadTasks(),this.loadDashboardStats()]);showNotification("Data refreshed successfully!","success")}catch(error){showNotification("Failed to refresh data.","error")}finally{if(refreshIcon){setTimeout(()=>{refreshIcon.style.animation=""},1e3)}}}closeAllModals(){document.querySelectorAll(".modal.active").forEach(modal=>{modal.classList.remove("active")});this.resetTaskForm()}resetTaskForm(){const form=document.getElementById("taskForm");if(form){form.reset()}this.currentEditingTask=null;const estimatedHours=document.getElementById("taskEstimatedHours");if(estimatedHours){estimatedHours.value="1.0"}const priority=document.getElementById("taskPriority");if(priority){priority.value="medium"}}openTaskModal(title="Create New Task"){const modal=document.getElementById("taskModal");const modalTitle=document.getElementById("modalTitle");const submitBtn=document.getElementById("taskSubmitBtn");if(modalTitle){modalTitle.textContent=title}if(submitBtn){const textSpan=submitBtn.querySelector(".btn-text");if(textSpan){textSpan.textContent=title.includes("Edit")?"Update Task":"Create Task"}}if(modal){modal.classList.add("active")}this.setDefaultDates();setTimeout(()=>{const titleField=document.getElementById("taskTitle");if(titleField){titleField.focus()}},100)}closeTaskModal(){const modal=document.getElementById("taskModal");if(modal){modal.classList.remove("active")}this.resetTaskForm()}setDefaultDates(){if(this.currentEditingTask)return;const now=new Date;now.setMinutes(now.getMinutes()-now.getTimezoneOffset());const startDateInput=document.getElementById("taskStartDate");if(startDateInput&&!startDateInput.value){startDateInput.value=now.toISOString().slice(0,16)}const tomorrow=new Date(now);tomorrow.setDate(tomorrow.getDate()+1);const dueDateInput=document.getElementById("taskDueDate");if(dueDateInput&&!dueDateInput.value){dueDateInput.value=tomorrow.toISOString().slice(0,16)}}escapeHtml(text){const div=document.createElement("div");div.textContent=text;return div.innerHTML}destroy(){if(this.refreshInterval){clearInterval(this.refreshInterval)}this.clearAllNotificationIntervals()}timerIntervals={};async startTimer(taskId){try{await window.api.request(`/tasks/${taskId}/time/start`,{method:"POST"});this.updateTimerDisplay(taskId)}catch(error){showNotification("Failed to start timer","error")}}async pauseTimer(taskId){try{await window.api.request(`/tasks/${taskId}/time/pause`,{method:"POST"})}catch(error){showNotification("Failed to pause timer","error")}this.clearTimerInterval(taskId);this.updateTimerDisplay(taskId,true)}async stopTimer(taskId){try{await window.api.request(`/tasks/${taskId}/time/pause`,{method:"POST"})}catch(error){showNotification("Failed to stop timer","error")}this.clearTimerInterval(taskId);this.updateTimerDisplay(taskId,true)}clearTimerInterval(taskId){if(this.timerIntervals[taskId]){clearInterval(this.timerIntervals[taskId]);delete this.timerIntervals[taskId]}}async updateTimerDisplay(taskId,reset=false){try{const res=await window.api.request(`/tasks/${taskId}/time/active`);const historyRes=await window.api.request(`/tasks/${taskId}/time/history`);const timerDisplay=document.getElementById(`timer-display-${taskId}`);const timerTotal=document.getElementById(`timer-total-${taskId}`);let totalSeconds=0;if(historyRes.history){for(const entry of historyRes.history){if(entry.duration)totalSeconds+=Math.floor(entry.duration*60)}}if(res.entry&&res.entry.startTime&&!res.entry.endTime){const start=new Date(res.entry.startTime);const now=new Date;const diff=Math.floor((now-start)/1e3);timerDisplay.textContent=this.formatSeconds(diff);this.clearTimerInterval(taskId);this.timerIntervals[taskId]=setInterval(()=>{const now2=new Date;const diff2=Math.floor((now2-start)/1e3);timerDisplay.textContent=this.formatSeconds(diff2)},1e3);timerTotal.textContent=`Total: ${this.formatSeconds(totalSeconds+diff)}`}else{timerDisplay.textContent="--:--:--";timerTotal.textContent=`Total: ${this.formatSeconds(totalSeconds)}`;this.clearTimerInterval(taskId)}}catch(error){}}formatSeconds(seconds){const h=String(Math.floor(seconds/3600)).padStart(2,"0");const m=String(Math.floor(seconds%3600/60)).padStart(2,"0");const s=String(seconds%60).padStart(2,"0");return`${h}:${m}:${s}`}async scheduleDeadlineNotifications(){if(typeof Notification!=="undefined"&&Notification.permission==="default"){try{await Notification.requestPermission()}catch(e){}}this.clearAllNotificationIntervals();if(typeof Notification==="undefined"||Notification.permission!=="granted")return;const now=new Date;const currentUser=window.authManager?.getCurrentUser?.();this.tasks.forEach(task=>{if(!task.due_date||task.status==="completed")return;if(currentUser&&task.assigned_to!==currentUser.id)return;const due=new Date(task.due_date);const msToDue=due-now;if(msToDue>0&&msToDue<=24*60*60*1e3){const notify=()=>{new Notification("Task Deadline Approaching",{body:`Task "${task.title}" is due at ${due.toLocaleString()}. Please complete it soon!`,tag:`task-deadline-${task.id}`})};if(msToDue<=2*60*60*1e3){notify();this.notificationIntervals[task.id]=setInterval(()=>{const t=this.tasks.find(t=>t.id===task.id);if(t&&t.status!=="completed"){notify()}else{this.clearNotificationInterval(task.id)}},2*60*60*1e3)}else{const firstTimeout=msToDue-2*60*60*1e3;this.notificationIntervals[task.id]=setTimeout(()=>{notify();this.notificationIntervals[task.id]=setInterval(()=>{const t=this.tasks.find(t=>t.id===task.id);if(t&&t.status!=="completed"){notify()}else{this.clearNotificationInterval(task.id)}},2*60*60*1e3)},firstTimeout)}}})}clearNotificationInterval(taskId){const interval=this.notificationIntervals[taskId];if(interval){clearInterval(interval);clearTimeout(interval);delete this.notificationIntervals[taskId]}}clearAllNotificationIntervals(){Object.keys(this.notificationIntervals).forEach(taskId=>{this.clearNotificationInterval(taskId)})}async notifyTaskAssignment(taskTitle,assignedUserId,assignedUserName){if(typeof Notification==="undefined")return;const currentUser=window.authManager?.getCurrentUser?.();if(!currentUser||currentUser.id!==assignedUserId)return;if(Notification.permission==="default"){try{await Notification.requestPermission()}catch(e){}}if(Notification.permission==="granted"){new Notification("New Task Assigned",{body:`You have been assigned a new task: "${taskTitle}"`,tag:`task-assigned-${taskTitle}`})}}}window.showTab=function(tabName){document.querySelectorAll(".nav-tab").forEach(tab=>{tab.classList.remove("active")});document.querySelectorAll(".tab-content").forEach(content=>{content.classList.remove("active")});const clickedTab=document.querySelector(`[data-tab="${tabName}"]`);if(clickedTab){clickedTab.classList.add("active")}const content=document.getElementById(tabName);if(content){content.classList.add("active")}if(tabName==="tasks"&&window.taskManager){window.taskManager.loadTasks()}else if(tabName==="team"&&window.taskManager){window.taskManager.loadUsers()}};window.openCreateTaskModal=function(){if(window.taskManager){window.taskManager.openTaskModal()}};window.closeTaskModal=function(){if(window.taskManager){window.taskManager.closeTaskModal()}};window.filterTasks=function(){if(window.taskManager){window.taskManager.filterTasks()}};window.searchTasks=function(){if(window.taskManager){window.taskManager.searchTasks()}};window.refreshDashboard=function(){if(window.taskManager){window.taskManager.refreshAll()}};window.showNotification=function(message,type="info"){const container=document.getElementById("notificationContainer");if(!container)return;const notification=document.createElement("div");notification.className=`notification ${type}`;notification.textContent=message;notification.addEventListener("click",()=>{notification.remove()});container.appendChild(notification);setTimeout(()=>{if(notification.parentNode){notification.remove()}},5e3)};window.formatDate=function(dateString){if(!dateString)return"No date";const date=new Date(dateString);const now=new Date;const diffTime=Math.abs(now-date);const diffDays=Math.ceil(diffTime/(1e3*60*60*24));if(diffDays===0){return"Today"}else if(diffDays===1){return date<now?"Yesterday":"Tomorrow"}else if(diffDays<7){return`${diffDays} days ${date<now?"ago":"away"}`}else{return date.toLocaleDateString()}};window.formatDuration=function(minutes){if(!minutes)return"0m";const hours=Math.floor(minutes/60);const mins=minutes%60;if(hours===0){return`${mins}m`}else if(mins===0){return`${hours}h`}else{return`${hours}h ${mins}m`}};let taskStatsChartInstance=null;let userProductivityChartInstance=null;async function fetchAndRenderReports(){const startDate=document.getElementById("reportStartDate").value;const endDate=document.getElementById("reportEndDate").value;const params=[];if(startDate)params.push(`startDate=${encodeURIComponent(startDate)}`);if(endDate)params.push(`endDate=${encodeURIComponent(endDate)}`);const query=params.length?`?${params.join("&")}`:"";const taskStats=await window.api.request(`/reports/task-stats${query}`);renderTaskStatsChart(taskStats);const userProductivity=await window.api.request(`/reports/user-productivity${query}`);renderUserProductivityChart(userProductivity);const timeTracking=await window.api.request(`/reports/time-tracking${query}`);renderTimeTracking(timeTracking)}function renderTaskStatsChart(stats){const container=document.getElementById("taskStatsChart");if(!container)return;container.innerHTML='<canvas id="taskStatsCanvas" height="120"></canvas>';const ctx=document.getElementById("taskStatsCanvas").getContext("2d");if(taskStatsChartInstance)taskStatsChartInstance.destroy();taskStatsChartInstance=new Chart(ctx,{type:"bar",data:{labels:["Completed","Pending","In Progress","Cancelled"],datasets:[{label:"Tasks",data:[stats.completed,stats.pending,stats.in_progress,stats.cancelled],backgroundColor:["#4caf50","#ff9800","#2196f3","#f44336"]}]},options:{responsive:true,plugins:{legend:{display:false}},scales:{y:{beginAtZero:true}}}})}function renderUserProductivityChart(data){const container=document.getElementById("userProductivityTable");if(!container)return;container.innerHTML='<canvas id="userProductivityCanvas" height="120"></canvas>';const ctx=document.getElementById("userProductivityCanvas").getContext("2d");if(userProductivityChartInstance)userProductivityChartInstance.destroy();userProductivityChartInstance=new Chart(ctx,{type:"bar",data:{labels:data.map(u=>u.full_name||u.username),datasets:[{label:"Completed Tasks",data:data.map(u=>u.completed_tasks),backgroundColor:"#4caf50"},{label:"Total Time (min)",data:data.map(u=>u.total_minutes),backgroundColor:"#2196f3"}]},options:{responsive:true,scales:{y:{beginAtZero:true}}}})}function renderTimeTracking(data){const container=document.getElementById("timeTrackingTable");if(!container)return;let html=`<table class="report-table"><thead><tr><th>User</th><th>Task</th><th>Entries</th><th>Total Time (min)</th><th>Avg Time (min)</th></tr></thead><tbody>`;data.forEach(row=>{html+=`<tr><td>${row.username}</td><td>${row.title||"-"}</td><td>${row.entries}</td><td>${row.total_minutes}</td><td>${row.avg_minutes}</td></tr>`});html+="</tbody></table>";container.innerHTML=html}document.addEventListener("DOMContentLoaded",()=>{console.log("üåü TaskFlow application starting...");if(!window.authManager){window.authManager=new AuthManager}window.taskManager=new TaskManager;if(window.authManager&&window.authManager.isAuthenticated()){window.taskManager.init()}window.addEventListener("authTokenChanged",event=>{if(event.detail.token){window.taskManager.init()}else{if(window.taskManager){window.taskManager.destroy()}}});setTimeout(()=>{if(window.authManager){window.authManager.hideLoadingScreen()}},1500)});document.addEventListener("visibilitychange",()=>{if(document.visibilityState==="visible"&&window.taskManager&&window.authManager.isAuthenticated()){window.taskManager.loadDashboardStats()}});window.addEventListener("beforeunload",()=>{if(window.taskManager){window.taskManager.destroy()}});if("serviceWorker"in navigator){window.addEventListener("load",()=>{navigator.serviceWorker.register("/sw.js").then(registration=>{console.log("SW registered: ",registration)}).catch(registrationError=>{console.log("SW registration failed: ",registrationError)})})}if(typeof module!=="undefined"&&module.exports){module.exports={TaskManager:TaskManager}}