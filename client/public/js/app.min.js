const getAPIBaseURL=()=>{const hostname=window.location.hostname;const port=window.location.port;const protocol=window.location.protocol;if(hostname==="54.80.7.27"||hostname==="172.31.36.218"||hostname.includes("your-domain.com")){return`${protocol}//${hostname}/api`}if(hostname.includes("vercel.app")){return`${protocol}//${hostname}/api`}if(hostname==="localhost"||hostname==="127.0.0.1"){const apiPort=port==="8080"?"3000":port;return`${protocol}//${hostname}:${apiPort}/api`}return"/api"};window.APP_CONFIG={API_BASE_URL:getAPIBaseURL(),WS_URL:window.location.origin.replace("http","ws").replace("https","wss"),APP_NAME:"TaskFlow Analytics",VERSION:"2.0.0",FEATURES:{REAL_TIME_Updates:true,ANALYTICS:true,REPORTS_EXPORT:true,TIME_TRACKING:true,NOTIFICATIONS:true},LIMITS:{MAX_FILE_SIZE:10*1024*1024,MAX_DESCRIPTION_LENGTH:5e3,AUTO_REFRESH_INTERVAL:5*60*1e3,NOTIFICATION_INTERVAL:30*1e3}};if(typeof module!=="undefined"&&module.exports){module.exports=window.APP_CONFIG}console.log("üîß App Config loaded:",{API_BASE_URL:window.APP_CONFIG.API_BASE_URL,WS_URL:window.APP_CONFIG.WS_URL,Environment:window.location.hostname.includes("localhost")?"Development":"Production"});class AuthManager{constructor(){this.currentUser=null;this.authToken=localStorage.getItem("authToken");this.isLoading=false;this.init()}init(){this.loadSavedUser();this.setupEventListeners();this.setupTokenRefresh();this.handleAuthStateChange()}loadSavedUser(){const savedUser=localStorage.getItem("user");if(savedUser&&this.authToken){try{this.currentUser=JSON.parse(savedUser);console.log("üë§ Loaded saved user:",this.currentUser.username)}catch(error){console.error("Failed to parse saved user data:",error);this.clearAuthData()}}}setupEventListeners(){window.addEventListener("authTokenChanged",event=>{this.authToken=event.detail.token});window.addEventListener("authExpired",()=>{this.handleAuthExpired()});this.setupFormListeners();this.setupPasswordValidation()}setupFormListeners(){const loginForm=document.getElementById("loginForm");if(loginForm){loginForm.addEventListener("submit",e=>{e.preventDefault();this.handleLogin()})}const registerForm=document.getElementById("registerForm");if(registerForm){registerForm.addEventListener("submit",e=>{e.preventDefault();this.handleRegister()})}const profileForm=document.getElementById("profileForm");if(profileForm){profileForm.addEventListener("submit",e=>{e.preventDefault();this.handleProfileUpdate()})}}setupPasswordValidation(){const passwordInput=document.getElementById("regPassword");const requirementsDiv=document.getElementById("passwordRequirements");if(passwordInput&&requirementsDiv){passwordInput.addEventListener("input",()=>{const password=passwordInput.value;this.validatePassword(password)});passwordInput.addEventListener("focus",()=>{requirementsDiv.style.display="block"});passwordInput.addEventListener("blur",()=>{setTimeout(()=>{if(passwordInput.value){requirementsDiv.style.display="none"}},200)})}}validatePassword(password){const requirements={length:password.length>=8,uppercase:/[A-Z]/.test(password),lowercase:/[a-z]/.test(password),number:/\d/.test(password)};this.updateRequirement("req-length",requirements.length);this.updateRequirement("req-uppercase",requirements.uppercase);this.updateRequirement("req-lowercase",requirements.lowercase);this.updateRequirement("req-number",requirements.number);return Object.values(requirements).every(req=>req)}updateRequirement(elementId,isValid){const element=document.getElementById(elementId);if(element){element.className=isValid?"valid":""}}setupTokenRefresh(){setInterval(()=>{if(this.isAuthenticated()){this.refreshToken()}},6*60*60*1e3)}handleAuthStateChange(){if(this.isAuthenticated()){this.showApplication()}else{this.showAuthentication()}}async handleLogin(){const username=document.getElementById("loginUsername").value.trim();const password=document.getElementById("loginPassword").value;if(!username||!password){this.showAuthError("Please enter both username and password.");return}this.setLoadingState("loginBtn",true,"Signing In...");this.hideAuthMessages();try{const response=await window.api.login({username:username,password:password});this.currentUser=response.user;localStorage.setItem("user",JSON.stringify(this.currentUser));this.showAuthSuccess("Welcome back! Redirecting...");setTimeout(()=>{this.showApplication();this.initializeApplication()},1e3)}catch(error){console.error("Login error:",error);this.showAuthError(error.getUserMessage())}finally{this.setLoadingState("loginBtn",false,"Sign In")}}async handleRegister(){const fullName=document.getElementById("regFullName").value.trim();const username=document.getElementById("regUsername").value.trim();const email=document.getElementById("regEmail").value.trim();const password=document.getElementById("regPassword").value;if(!fullName||!username||!email||!password){this.showAuthError("Please fill in all fields.");return}if(!this.validateEmail(email)){this.showAuthError("Please enter a valid email address.");return}if(!this.validatePassword(password)){this.showAuthError("Password does not meet the requirements.");return}this.setLoadingState("registerBtn",true,"Creating Account...");this.hideAuthMessages();try{const response=await window.api.register({fullName:fullName,username:username,email:email,password:password});this.currentUser=response.user;localStorage.setItem("user",JSON.stringify(this.currentUser));this.showAuthSuccess("Account created successfully! Redirecting...");setTimeout(()=>{this.showApplication();this.initializeApplication()},1e3)}catch(error){console.error("Registration error:",error);this.showAuthError(error.getUserMessage())}finally{this.setLoadingState("registerBtn",false,"Create Account")}}async handleProfileUpdate(){const fullName=document.getElementById("profileFullName").value.trim();const email=document.getElementById("profileEmail").value.trim();if(!fullName||!email){window.showNotification("Please fill in all fields.","error");return}if(!this.validateEmail(email)){window.showNotification("Please enter a valid email address.","error");return}try{const response=await window.api.updateProfile({fullName:fullName,email:email});this.currentUser=response.user;localStorage.setItem("user",JSON.stringify(this.currentUser));this.updateUserDisplay();window.showNotification("Profile updated successfully!","success");window.closeProfileModal()}catch(error){console.error("Profile update error:",error);window.showNotification(error.getUserMessage(),"error")}}async logout(){try{this.clearAuthData();this.showLoadingScreen();if(window.requestCache){window.requestCache.clear()}setTimeout(()=>{this.showAuthentication();this.hideLoadingScreen()},500);console.log("üëã User logged out successfully")}catch(error){console.error("Logout error:",error);this.clearAuthData();this.showAuthentication()}}async refreshToken(){if(!this.authToken)return;try{await window.api.refreshToken();console.log("üîÑ Token refreshed successfully")}catch(error){console.error("Token refresh failed:",error);this.handleAuthExpired()}}handleAuthExpired(){console.log("üîê Authentication expired");this.clearAuthData();this.showAuthentication();window.showNotification("Your session has expired. Please login again.","warning")}clearAuthData(){this.currentUser=null;this.authToken=null;localStorage.removeItem("authToken");localStorage.removeItem("user");window.api.clearAuthToken()}showAuthentication(){document.getElementById("loadingScreen").style.display="none";document.getElementById("authContainer").style.display="flex";document.getElementById("appContainer").style.display="none";document.getElementById("createTaskFab").style.display="none";this.resetAuthForms();this.hideAuthMessages()}showApplication(){document.getElementById("loadingScreen").style.display="none";document.getElementById("authContainer").style.display="none";document.getElementById("appContainer").style.display="flex";document.getElementById("createTaskFab").style.display="block";this.updateUserDisplay()}showLoadingScreen(){document.getElementById("loadingScreen").style.display="flex";document.getElementById("authContainer").style.display="none";document.getElementById("appContainer").style.display="none";document.getElementById("createTaskFab").style.display="none"}hideLoadingScreen(){document.getElementById("loadingScreen").style.display="none"}async initializeApplication(){if(window.taskManager){await window.taskManager.init()}}updateUserDisplay(){if(!this.currentUser)return;const userName=document.getElementById("userName");const userFullName=document.getElementById("userFullName");const userAvatar=document.getElementById("userAvatar");if(userName){userName.textContent=this.currentUser.fullName||this.currentUser.full_name||this.currentUser.username}if(userFullName){userFullName.textContent=this.currentUser.fullName||this.currentUser.full_name||this.currentUser.username}if(userAvatar){const name=this.currentUser.fullName||this.currentUser.full_name||this.currentUser.username;userAvatar.textContent=name.charAt(0).toUpperCase()}this.updateProfileForm()}updateProfileForm(){const profileFullName=document.getElementById("profileFullName");const profileEmail=document.getElementById("profileEmail");if(profileFullName&&this.currentUser){profileFullName.value=this.currentUser.fullName||this.currentUser.full_name||""}if(profileEmail&&this.currentUser){profileEmail.value=this.currentUser.email||""}}resetAuthForms(){const loginForm=document.getElementById("loginForm");const registerForm=document.getElementById("registerForm");if(loginForm)loginForm.reset();if(registerForm)registerForm.reset()}showAuthError(message){const errorDiv=document.getElementById("authError");if(errorDiv){errorDiv.textContent=message;errorDiv.style.display="block"}}showAuthSuccess(message){const successDiv=document.getElementById("authSuccess");if(successDiv){successDiv.textContent=message;successDiv.style.display="block"}}hideAuthMessages(){const errorDiv=document.getElementById("authError");const successDiv=document.getElementById("authSuccess");if(errorDiv)errorDiv.style.display="none";if(successDiv)successDiv.style.display="none"}setLoadingState(buttonId,isLoading,loadingText="Loading..."){const button=document.getElementById(buttonId);if(!button)return;const textSpan=button.querySelector(".btn-text");const loaderSpan=button.querySelector(".btn-loader");if(isLoading){button.disabled=true;if(textSpan)textSpan.style.display="none";if(loaderSpan){loaderSpan.style.display="flex";loaderSpan.innerHTML=`<div class="spinner"></div>${loadingText}`}}else{button.disabled=false;if(textSpan)textSpan.style.display="block";if(loaderSpan)loaderSpan.style.display="none"}}validateEmail(email){const emailRegex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;return emailRegex.test(email)}isAuthenticated(){return!!(this.authToken&&this.currentUser)}getCurrentUser(){return this.currentUser}hasRole(role){return this.currentUser?.role===role}isAdmin(){return this.hasRole("admin")}getUserInitials(){if(!this.currentUser)return"U";const name=this.currentUser.fullName||this.currentUser.full_name||this.currentUser.username;return name.split(" ").map(n=>n.charAt(0)).join("").toUpperCase().slice(0,2)}}window.showLoginForm=function(){document.getElementById("loginForm").style.display="block";document.getElementById("registerForm").style.display="none";document.getElementById("authError").style.display="none";document.getElementById("authSuccess").style.display="none"};window.showRegisterForm=function(){document.getElementById("loginForm").style.display="none";document.getElementById("registerForm").style.display="block";document.getElementById("authError").style.display="none";document.getElementById("authSuccess").style.display="none"};window.logout=function(){if(window.authManager){window.authManager.logout()}};window.toggleUserMenu=function(){const menu=document.getElementById("userMenu");if(menu){menu.classList.toggle("show")}};window.showProfileModal=function(){const modal=document.getElementById("profileModal");if(modal){if(window.authManager){window.authManager.updateProfileForm()}modal.classList.add("active")}const userMenu=document.getElementById("userMenu");if(userMenu){userMenu.classList.remove("show")}};window.closeProfileModal=function(){const modal=document.getElementById("profileModal");if(modal){modal.classList.remove("active")}};document.addEventListener("click",e=>{const userMenu=document.getElementById("userMenu");const menuBtn=document.querySelector(".menu-btn");if(userMenu&&!userMenu.contains(e.target)&&!menuBtn.contains(e.target)){userMenu.classList.remove("show")}});if(typeof module!=="undefined"&&module.exports){module.exports=AuthManager}class APIClient{constructor(){this.baseURL=this.getBaseURL();this.authToken=localStorage.getItem("authToken");this.setupInterceptors()}getBaseURL(){return window.APP_CONFIG.API_BASE_URL}setupInterceptors(){window.addEventListener("authTokenChanged",event=>{this.authToken=event.detail.token})}async request(endpoint,options={}){const url=`${this.baseURL}${endpoint}`;var config={headers:{"Content-Type":"application/json",...options.headers},...options};if(this.authToken){config.headers.Authorization=`Bearer ${this.authToken}`}try{console.log(`üåê ${config.method||"GET"} ${url}`);const response=await fetch(url,config);const contentType=response.headers.get("content-type");let data;if(contentType&&contentType.includes("application/json")){data=await response.json()}else{data=await response.text()}if(!response.ok){if(response.status===401){this.handleUnauthorized();throw new APIError("Session expired. Please login again.",401,data)}if(response.status===403){throw new APIError("Permission denied.",403,data)}if(response.status===404){throw new APIError("Resource not found.",404,data)}if(response.status>=500){throw new APIError("Server error. Please try again later.",response.status,data)}const errorMessage=data?.error||data?.message||"Request failed";throw new APIError(errorMessage,response.status,data)}console.log(`‚úÖ ${config.method||"GET"} ${url} - Success`);return data}catch(error){console.error(`‚ùå ${config.method||"GET"} ${url} - Error:`,error);if(error instanceof TypeError&&error.message.includes("fetch")){throw new APIError("Network error. Please check your connection.",0)}if(error instanceof APIError){throw error}throw new APIError("An unexpected error occurred.",0,error)}}handleUnauthorized(){this.authToken=null;localStorage.removeItem("authToken");localStorage.removeItem("user");window.dispatchEvent(new CustomEvent("authExpired"))}async get(endpoint,params={}){const url=new URL(`${this.baseURL}${endpoint}`);Object.keys(params).forEach(key=>{if(params[key]!==undefined&&params[key]!==null){url.searchParams.append(key,params[key])}});return this.request(endpoint+url.search,{method:"GET"})}async post(endpoint,data={}){return this.request(endpoint,{method:"POST",body:JSON.stringify(data)})}async put(endpoint,data={}){return this.request(endpoint,{method:"PUT",body:JSON.stringify(data)})}async delete(endpoint){return this.request(endpoint,{method:"DELETE"})}async patch(endpoint,data={}){return this.request(endpoint,{method:"PATCH",body:JSON.stringify(data)})}async upload(endpoint,formData){var config={method:"POST",body:formData};if(this.authToken){config.headers={Authorization:`Bearer ${this.authToken}`}}return this.request(endpoint,config)}async register(userData){const response=await this.post("/auth/register",userData);if(response.token){this.setAuthToken(response.token)}return response}async login(credentials){const response=await this.post("/auth/login",credentials);if(response.token){this.setAuthToken(response.token)}return response}async getProfile(){return this.get("/auth/profile")}async updateProfile(profileData){return this.put("/auth/profile",profileData)}async changePassword(passwordData){return this.put("/auth/change-password",passwordData)}async refreshToken(){const response=await this.post("/auth/refresh");if(response.token){this.setAuthToken(response.token)}return response}async getTasks(filters={}){return this.get("/tasks",filters)}async getTask(taskId){return this.get(`/tasks/${taskId}`)}async createTask(taskData){return this.post("/tasks",taskData)}async updateTask(taskId,taskData){return this.put(`/tasks/${taskId}`,taskData)}async deleteTask(taskId){return this.delete(`/tasks/${taskId}`)}async getTaskStats(){return this.get("/tasks/stats")}async getUsers(options={}){return this.get("/users",options)}async getUser(userId){return this.get(`/users/${userId}`)}async updateUser(userId,userData){return this.put(`/users/${userId}`,userData)}async getDashboardStats(){return this.get("/users/dashboard/stats")}async getUserTasks(userId,filters={}){return this.get(`/users/${userId}/tasks`,filters)}setAuthToken(token){this.authToken=token;localStorage.setItem("authToken",token);window.dispatchEvent(new CustomEvent("authTokenChanged",{detail:{token:token}}))}clearAuthToken(){this.authToken=null;localStorage.removeItem("authToken");localStorage.removeItem("user");window.dispatchEvent(new CustomEvent("authTokenChanged",{detail:{token:null}}))}isAuthenticated(){return!!this.authToken}getAuthToken(){return this.authToken}async healthCheck(){try{const response=await fetch(`${this.baseURL}/health`);return response.ok}catch(error){console.error("Health check failed:",error);return false}}async testConnection(){try{const response=await this.get("/health");return{status:"connected",serverTime:response.timestamp,uptime:response.uptime}}catch(error){return{status:"disconnected",error:error.message}}}}class APIError extends Error{constructor(message,status=0,data=null){super(message);this.name="APIError";this.status=status;this.data=data}isNetworkError(){return this.status===0}isClientError(){return this.status>=400&&this.status<500}isServerError(){return this.status>=500}isUnauthorized(){return this.status===401}isForbidden(){return this.status===403}isNotFound(){return this.status===404}getUserMessage(){if(this.isNetworkError()){return"Please check your internet connection and try again."}if(this.isUnauthorized()){return"Your session has expired. Please login again."}if(this.isForbidden()){return"You don't have permission to perform this action."}if(this.isNotFound()){return"The requested resource was not found."}if(this.isServerError()){return"Server error. Please try again later."}return this.message||"An unexpected error occurred."}}class RequestCache{constructor(ttl=5*60*1e3){this.cache=new Map;this.ttl=ttl}get(key){const cached=this.cache.get(key);if(!cached)return null;if(Date.now()-cached.timestamp>this.ttl){this.cache.delete(key);return null}return cached.data}set(key,data){this.cache.set(key,{data:data,timestamp:Date.now()})}clear(){this.cache.clear()}cleanup(){const now=Date.now();for(const[key,value]of this.cache.entries()){if(now-value.timestamp>this.ttl){this.cache.delete(key)}}}}window.api=new APIClient;window.requestCache=new RequestCache;setInterval(()=>{window.requestCache.cleanup()},10*60*1e3);if(typeof module!=="undefined"&&module.exports){module.exports={APIClient:APIClient,APIError:APIError,RequestCache:RequestCache}}class WebSocketClient{constructor(){this.socket=null;this.isConnected=false;this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectDelay=1e3;this.eventHandlers={};this.userId=null;this.currentTaskId=null}connect(userId){try{this.userId=userId;this.socket=io(window.location.origin,{transports:["websocket","polling"]});this.setupEventHandlers();this.setupConnectionHandlers();console.log("üîå WebSocket connection initiated")}catch(error){console.error("WebSocket connection error:",error)}}setupConnectionHandlers(){this.socket.on("connect",()=>{console.log("‚úÖ WebSocket connected");this.isConnected=true;this.reconnectAttempts=0;if(this.userId){this.socket.emit("join-user-room",this.userId)}if(this.currentTaskId){this.socket.emit("join-task-room",this.currentTaskId)}this.showNotification("Connected to real-time updates","success")});this.socket.on("disconnect",()=>{console.log("‚ùå WebSocket disconnected");this.isConnected=false;this.showNotification("Disconnected from real-time updates","warning")});this.socket.on("connect_error",error=>{console.error("WebSocket connection error:",error);this.handleReconnect()})}setupEventHandlers(){this.socket.on("task-created",data=>{this.handleTaskCreated(data.task)});this.socket.on("task-updated",data=>{this.handleTaskUpdated(data.task)});this.socket.on("task-deleted",data=>{this.handleTaskDeleted(data.taskId)});this.socket.on("task-assigned",data=>{this.handleTaskAssigned(data.task)});this.socket.on("task-status-changed",data=>{this.handleTaskStatusChanged(data)});this.socket.on("task-overdue",data=>{this.handleTaskOverdue(data.task)});this.socket.on("task-due-soon",data=>{this.handleTaskDueSoon(data.task)});this.socket.on("file-uploaded",data=>{this.handleFileUploaded(data.file,data.uploadedBy)});this.socket.on("file-deleted",data=>{this.handleFileDeleted(data.fileId,data.filename)});this.socket.on("system-notification",data=>{this.showNotification(data.message,data.type)})}handleReconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;console.log(`üîÑ Reconnecting... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);setTimeout(()=>{this.connect(this.userId)},this.reconnectDelay*this.reconnectAttempts)}else{console.error("‚ùå Max reconnection attempts reached");this.showNotification("Connection lost. Please refresh the page.","error")}}joinTaskRoom(taskId){if(this.socket&&this.isConnected){this.currentTaskId=taskId;this.socket.emit("join-task-room",taskId)}}leaveTaskRoom(taskId){if(this.socket&&this.isConnected){this.socket.emit("leave-task-room",taskId);if(this.currentTaskId===taskId){this.currentTaskId=null}}}handleTaskCreated(task){console.log("üìã Task created:",task.title);this.showNotification(`New task created: ${task.title}`,"info");if(window.currentPage==="tasks"){loadTasks()}}handleTaskUpdated(task){console.log("üìù Task updated:",task.title);const taskElement=document.querySelector(`[data-task-id="${task.id}"]`);if(taskElement){this.updateTaskElement(taskElement,task)}if(window.currentPage==="dashboard"){loadAnalytics()}}handleTaskDeleted(taskId){console.log("üóëÔ∏è Task deleted:",taskId);const taskElement=document.querySelector(`[data-task-id="${taskId}"]`);if(taskElement){taskElement.remove()}this.showNotification("Task deleted","info")}handleTaskAssigned(task){console.log("üë§ Task assigned:",task.title);this.showNotification(`You were assigned: ${task.title}`,"info");if(Notification.permission==="granted"){new Notification("New Task Assignment",{body:`You were assigned: ${task.title}`,icon:"/favicon.ico"})}}handleTaskStatusChanged(data){console.log("üîÑ Task status changed:",data.taskId,data.oldStatus,"->",data.newStatus);const statusMessages={completed:"Task completed","in-progress":"Task in progress",pending:"Task pending",cancelled:"Task cancelled"};const message=statusMessages[data.newStatus]||"Task status changed";this.showNotification(`${message}: ${data.task.title}`,"info")}handleTaskOverdue(task){console.log("‚ö†Ô∏è Task overdue:",task.title);this.showNotification(`Task overdue: ${task.title}`,"error");if(Notification.permission==="granted"){new Notification("Task Overdue!",{body:`${task.title} is overdue`,icon:"/favicon.ico"})}}handleTaskDueSoon(task){console.log("üìÖ Task due soon:",task.title);this.showNotification(`Task due soon: ${task.title}`,"warning");if(Notification.permission==="granted"){new Notification("Task Due Soon",{body:`${task.title} is due soon`,icon:"/favicon.ico"})}}handleFileUploaded(file,uploadedBy){console.log("üìÅ File uploaded:",file.originalName);this.showNotification(`File uploaded: ${file.originalName}`,"info");if(window.currentTaskId){loadTaskFiles(window.currentTaskId)}}handleFileDeleted(fileId,filename){console.log("üóëÔ∏è File deleted:",filename);this.showNotification(`File deleted: ${filename}`,"info");const fileElement=document.querySelector(`[data-file-id="${fileId}"]`);if(fileElement){fileElement.remove()}}updateTaskElement(element,task){const titleElement=element.querySelector(".task-title");if(titleElement){titleElement.textContent=task.title}const statusElement=element.querySelector(".task-status");if(statusElement){statusElement.textContent=task.status;statusElement.className=`task-status status-${task.status}`}const priorityElement=element.querySelector(".task-priority");if(priorityElement){priorityElement.textContent=task.priority;priorityElement.className=`task-priority priority-${task.priority}`}}showNotification(message,type="info"){const notification=document.createElement("div");notification.className=`notification notification-${type}`;notification.innerHTML=`\n            <div class="notification-content">\n                <span class="notification-message">${message}</span>\n                <button class="notification-close" onclick="this.parentElement.parentElement.remove()">√ó</button>\n            </div>\n        `;let container=document.getElementById("notification-container");if(!container){container=document.createElement("div");container.id="notification-container";document.body.appendChild(container)}container.appendChild(notification);setTimeout(()=>{if(notification.parentElement){notification.remove()}},5e3)}disconnect(){if(this.socket){this.socket.disconnect();this.socket=null;this.isConnected=false}}}const wsClient=new WebSocketClient;if("Notification"in window&&Notification.permission==="default"){Notification.requestPermission()}class ReportsManager{constructor(){this.charts={};this.currentData={};this.dateRange={start:null,end:null};this.refreshInterval=null;this.isLoading=false;this.init()}async init(){console.log("üöÄ Initializing Enhanced Reports Manager...");this.setupEventListeners();this.setDefaultDateRange();await this.loadAllReports();this.setupAutoRefresh();console.log("‚úÖ Reports Manager initialized successfully")}setupEventListeners(){const applyButton=document.getElementById("applyReportFilters");const resetButton=document.getElementById("resetReportFilters");if(applyButton){applyButton.addEventListener("click",()=>this.applyDateFilters())}if(resetButton){resetButton.addEventListener("click",()=>this.resetDateFilters())}const exportCSV=document.getElementById("exportCSV");const exportPDF=document.getElementById("exportPDF");const exportExcel=document.getElementById("exportExcel");if(exportCSV){exportCSV.addEventListener("click",()=>this.exportReport("csv"))}if(exportPDF){exportPDF.addEventListener("click",()=>this.exportReport("pdf"))}if(exportExcel){exportExcel.addEventListener("click",()=>this.exportReport("excel"))}const realtimeToggle=document.getElementById("realtimeToggle");if(realtimeToggle){realtimeToggle.addEventListener("change",e=>{if(e.target.checked){this.startRealTimeUpdates()}else{this.stopRealTimeUpdates()}})}const refreshButton=document.getElementById("refreshReports");if(refreshButton){refreshButton.addEventListener("click",()=>this.refreshAllReports())}}setDefaultDateRange(){const endDate=new Date;const startDate=new Date;startDate.setDate(endDate.getDate()-30);const startInput=document.getElementById("reportStartDate");const endInput=document.getElementById("reportEndDate");if(startInput){startInput.value=startDate.toISOString().split("T")[0]}if(endInput){endInput.value=endDate.toISOString().split("T")[0]}this.dateRange={start:startDate.toISOString(),end:endDate.toISOString()}}async loadAllReports(){if(this.isLoading)return;this.isLoading=true;this.showLoadingState();try{await Promise.all([this.loadOverviewStats(),this.loadTaskStatusChart(),this.loadPriorityChart(),this.loadTeamPerformance(),this.loadCompletionTrend(),this.loadTimeAnalytics(),this.loadWorkloadDistribution(),this.loadOverdueTasks(),this.loadPredictiveAnalytics(),this.loadRealTimeDashboard()])}catch(error){console.error("‚ùå Error loading reports:",error);this.showErrorState("Failed to load reports data")}finally{this.isLoading=false;this.hideLoadingState()}}async loadOverviewStats(){try{const params=this.getDateParams();console.log("üìä Loading overview stats with params:",params);const data=await window.api.get("/reports/overview-stats",params);console.log("üìä Overview stats received:",data);this.currentData.overview=data;this.updateOverviewCards(data)}catch(error){console.error("‚ùå Error loading overview stats:",error);this.showErrorInCard("analyticsTotal","Error loading stats");window.showNotification("Failed to load overview statistics","error")}}async loadTaskStatusChart(){try{const params=this.getDateParams();console.log("üìä Loading task stats with params:",params);const data=await window.api.get("/reports/task-stats",params);console.log("üìä Task stats received:",data);this.currentData.taskStats=data;this.renderTaskStatusChart(data)}catch(error){console.error("‚ùå Error loading task status data:",error);this.showChartError("taskStatsChart","Failed to load task statistics");window.showNotification("Failed to load task status chart","error")}}async loadPriorityChart(){try{const params=this.getDateParams();const data=await window.api.get("/reports/priority-stats",params);this.currentData.priorityStats=data;this.renderPriorityChart(data)}catch(error){console.error("Error loading priority data:",error)}}async loadTeamPerformance(){try{const params=this.getDateParams();const data=await window.api.get("/reports/team-performance",params);this.currentData.teamPerformance=data;this.renderTeamPerformanceTable(data)}catch(error){console.error("Error loading team performance:",error)}}async loadCompletionTrend(){try{const params=this.getDateParams();const data=await window.api.get("/reports/completion-trend",params);this.currentData.completionTrend=data;this.renderCompletionTrendChart(data)}catch(error){console.error("Error loading completion trend:",error)}}async loadTimeAnalytics(){try{const params=this.getDateParams();const data=await window.api.get("/reports/time-analytics",params);this.currentData.timeAnalytics=data;this.renderTimeAnalyticsChart(data)}catch(error){console.error("Error loading time analytics:",error)}}async loadWorkloadDistribution(){try{const data=await window.api.get("/reports/workload-distribution");this.currentData.workloadDistribution=data;this.renderWorkloadChart(data)}catch(error){console.error("Error loading workload distribution:",error)}}async loadOverdueTasks(){try{const data=await window.api.get("/reports/overdue-tasks");this.currentData.overdueTasks=data;this.renderOverdueTasksList(data)}catch(error){console.error("Error loading overdue tasks:",error)}}async loadPredictiveAnalytics(){try{const data=await window.api.get("/reports/predictive-analytics");this.currentData.predictiveAnalytics=data;this.renderPredictiveInsights(data)}catch(error){console.error("Error loading predictive analytics:",error)}}async loadRealTimeDashboard(){try{const data=await window.api.get("/reports/real-time-dashboard");this.currentData.realTimeDashboard=data;this.updateRealTimeDashboard(data)}catch(error){console.error("Error loading real-time dashboard:",error)}}updateOverviewCards(data){const elements={total:document.getElementById("analyticsTotal"),completed:document.getElementById("analyticsCompleted"),avgTime:document.getElementById("analyticsAvgTime"),completionRate:document.getElementById("analyticsCompletionRate")};console.log("üìä Updating overview cards with data:",data);if(elements.total){elements.total.textContent=data.total_tasks||0;elements.total.style.color="#333"}if(elements.completed){elements.completed.textContent=data.completed_tasks||0;elements.completed.style.color="#10B981"}if(elements.avgTime){const avgHours=parseFloat(data.avg_completion_hours||0).toFixed(1);elements.avgTime.textContent=`${avgHours}h`;elements.avgTime.style.color="#3B82F6"}if(elements.completionRate){const rate=parseFloat(data.completion_rate||0).toFixed(1);elements.completionRate.textContent=`${rate}%`;elements.completionRate.style.color=rate>70?"#10B981":rate>40?"#F59E0B":"#EF4444"}this.updateTrendIndicators(data)}showErrorInCard(elementId,message){const element=document.getElementById(elementId);if(element){element.textContent="Error";element.style.color="#EF4444";element.title=message}}showChartError(canvasId,message){const canvas=document.getElementById(canvasId);if(canvas){const ctx=canvas.getContext("2d");ctx.clearRect(0,0,canvas.width,canvas.height);ctx.fillStyle="#EF4444";ctx.font="14px Arial";ctx.textAlign="center";ctx.fillText(message,canvas.width/2,canvas.height/2)}}updateTrendIndicators(data){const trends={total:data.total_tasks>0?"‚Üó +5%":"‚Äî 0%",completed:data.completed_tasks>0?"‚Üó +12%":"‚Äî 0%",avgTime:data.avg_completion_hours<24?"‚Üó -15%":"‚Üó +8%",completionRate:data.completion_rate>50?"‚Üó +8%":"‚Üò -3%"};const trendElements={total:document.getElementById("analyticsTotalTrend"),completed:document.getElementById("analyticsCompletedTrend"),avgTime:document.getElementById("analyticsAvgTimeTrend"),completionRate:document.getElementById("analyticsCompletionRateTrend")};Object.keys(trends).forEach(key=>{if(trendElements[key]){trendElements[key].textContent=trends[key];trendElements[key].className=trends[key].includes("‚Üó")?"card-trend positive":trends[key].includes("‚Üò")?"card-trend negative":"card-trend neutral"}})}renderTaskStatusChart(data){const ctx=document.getElementById("taskStatsChart");if(!ctx)return;if(this.charts.taskStats){this.charts.taskStats.destroy()}this.charts.taskStats=new Chart(ctx,{type:"doughnut",data:{labels:["Completed","In Progress","Pending","Cancelled"],datasets:[{data:[data.completed||0,data.in_progress||0,data.pending||0,data.cancelled||0],backgroundColor:["#10B981","#3B82F6","#F59E0B","#EF4444"],borderWidth:2,borderColor:"#fff"}]},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{position:"bottom",labels:{padding:20,usePointStyle:true}},tooltip:{callbacks:{label:function(context){const total=context.dataset.data.reduce((a,b)=>a+b,0);const percentage=total>0?(context.raw/total*100).toFixed(1):0;return`${context.label}: ${context.raw} (${percentage}%)`}}}}}})}renderPriorityChart(data){const ctx=document.getElementById("priorityStatsChart");if(!ctx)return;if(this.charts.priority){this.charts.priority.destroy()}const labels=data.map(item=>this.capitalizePriority(item.priority));const totals=data.map(item=>item.total);const completed=data.map(item=>item.completed);this.charts.priority=new Chart(ctx,{type:"bar",data:{labels:labels,datasets:[{label:"Total Tasks",data:totals,backgroundColor:"rgba(59, 130, 246, 0.6)",borderColor:"rgba(59, 130, 246, 1)",borderWidth:1},{label:"Completed",data:completed,backgroundColor:"rgba(16, 185, 129, 0.6)",borderColor:"rgba(16, 185, 129, 1)",borderWidth:1}]},options:{responsive:true,maintainAspectRatio:false,scales:{y:{beginAtZero:true,ticks:{stepSize:1}}},plugins:{legend:{position:"top"}}}})}renderCompletionTrendChart(data){const ctx=document.getElementById("trendChart");if(!ctx)return;if(this.charts.trend){this.charts.trend.destroy()}const labels=data.map(item=>new Date(item.date).toLocaleDateString());const completedTasks=data.map(item=>item.completed_tasks);this.charts.trend=new Chart(ctx,{type:"line",data:{labels:labels,datasets:[{label:"Tasks Completed",data:completedTasks,borderColor:"rgba(16, 185, 129, 1)",backgroundColor:"rgba(16, 185, 129, 0.1)",borderWidth:2,fill:true,tension:.4}]},options:{responsive:true,maintainAspectRatio:false,scales:{y:{beginAtZero:true,ticks:{stepSize:1}}},plugins:{legend:{display:false}}}})}renderTimeAnalyticsChart(data){const ctx=document.getElementById("timeAnalyticsChart");if(!ctx)return;if(this.charts.timeAnalytics){this.charts.timeAnalytics.destroy()}const labels=data.map(item=>new Date(item.date).toLocaleDateString());const totalMinutes=data.map(item=>(item.total_minutes/60).toFixed(1));const activeUsers=data.map(item=>item.active_users);this.charts.timeAnalytics=new Chart(ctx,{type:"line",data:{labels:labels,datasets:[{label:"Hours Worked",data:totalMinutes,borderColor:"rgba(59, 130, 246, 1)",backgroundColor:"rgba(59, 130, 246, 0.1)",borderWidth:2,yAxisID:"y"},{label:"Active Users",data:activeUsers,borderColor:"rgba(245, 158, 11, 1)",backgroundColor:"rgba(245, 158, 11, 0.1)",borderWidth:2,yAxisID:"y1"}]},options:{responsive:true,maintainAspectRatio:false,scales:{y:{type:"linear",display:true,position:"left",title:{display:true,text:"Hours"}},y1:{type:"linear",display:true,position:"right",title:{display:true,text:"Users"},grid:{drawOnChartArea:false}}}}})}renderWorkloadChart(data){const ctx=document.getElementById("workloadChart");if(!ctx)return;if(this.charts.workload){this.charts.workload.destroy()}const labels=data.map(item=>item.full_name);const pendingWorkload=data.map(item=>item.pending_workload);const activeWorkload=data.map(item=>item.active_workload);this.charts.workload=new Chart(ctx,{type:"bar",data:{labels:labels,datasets:[{label:"Pending Tasks",data:pendingWorkload,backgroundColor:"rgba(245, 158, 11, 0.6)",borderColor:"rgba(245, 158, 11, 1)",borderWidth:1},{label:"Active Tasks",data:activeWorkload,backgroundColor:"rgba(59, 130, 246, 0.6)",borderColor:"rgba(59, 130, 246, 1)",borderWidth:1}]},options:{responsive:true,maintainAspectRatio:false,scales:{x:{stacked:true},y:{stacked:true,beginAtZero:true,ticks:{stepSize:1}}}}})}renderTeamPerformanceTable(data){const container=document.getElementById("userProductivityTable");if(!container)return;const html=`\n            <div class="table-responsive">\n                <table class="performance-table">\n                    <thead>\n                        <tr>\n                            <th>Team Member</th>\n                            <th>Total Tasks</th>\n                            <th>Completed</th>\n                            <th>In Progress</th>\n                            <th>Completion Rate</th>\n                            <th>Avg. Time (hrs)</th>\n                            <th>Total Time (hrs)</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${data.map(member=>`\n                            <tr>\n                                <td>\n                                    <div class="member-info">\n                                        <div class="member-avatar">${member.full_name.charAt(0)}</div>\n                                        <span>${member.full_name}</span>\n                                    </div>\n                                </td>\n                                <td>${member.total_tasks||0}</td>\n                                <td><span class="badge badge-success">${member.completed_tasks||0}</span></td>\n                                <td><span class="badge badge-primary">${member.in_progress_tasks||0}</span></td>\n                                <td>\n                                    <div class="progress-container">\n                                        <div class="progress-bar" style="width: ${member.completion_rate||0}%"></div>\n                                        <span class="progress-text">${member.completion_rate||0}%</span>\n                                    </div>\n                                </td>\n                                <td>${member.avg_completion_hours||0}</td>\n                                <td>${((member.total_time_minutes||0)/60).toFixed(1)}</td>\n                            </tr>\n                        `).join("")}\n                    </tbody>\n                </table>\n            </div>\n        `;container.innerHTML=html}renderOverdueTasksList(data){const container=document.getElementById("overdueTasksList");if(!container)return;if(data.length===0){container.innerHTML=`\n                <div class="empty-state">\n                    <div class="empty-icon">‚úÖ</div>\n                    <h3>No Overdue Tasks!</h3>\n                    <p>Great job keeping up with deadlines!</p>\n                </div>\n            `;return}const html=`\n            <div class="overdue-tasks-list">\n                ${data.map(task=>`\n                    <div class="overdue-task-item priority-${task.priority}">\n                        <div class="task-header">\n                            <h4>${this.escapeHtml(task.title)}</h4>\n                            <span class="priority-badge priority-${task.priority}">${task.priority}</span>\n                        </div>\n                        <div class="task-meta">\n                            <span class="overdue-days">${Math.floor(task.days_overdue)} days overdue</span>\n                            <span class="assigned-to">üë§ ${task.assigned_to_name||"Unassigned"}</span>\n                            <span class="category">üìÇ ${task.category}</span>\n                        </div>\n                        <div class="task-dates">\n                            <small>Due: ${new Date(task.due_date).toLocaleDateString()}</small>\n                        </div>\n                    </div>\n                `).join("")}\n            </div>\n        `;container.innerHTML=html}renderPredictiveInsights(data){const container=document.getElementById("predictiveInsights");if(!container)return;const velocity=data.velocity||{};const efficiency=data.efficiency||{};const html=`\n            <div class="predictive-analytics">\n                <div class="insights-grid">\n                    <div class="insight-card">\n                        <div class="insight-header">\n                            <h4>üöÄ Team Velocity</h4>\n                        </div>\n                        <div class="insight-content">\n                            <div class="metric-large">${velocity.current_weekly_velocity||0}</div>\n                            <div class="metric-label">Tasks/Week</div>\n                            <div class="insight-details">\n                                <p><strong>Remaining Tasks:</strong> ${velocity.remaining_tasks||0}</p>\n                                <p><strong>Estimated Completion:</strong> \n                                   ${velocity.estimated_completion_weeks?`${velocity.estimated_completion_weeks} weeks`:"Unable to estimate"}\n                                </p>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div class="insight-card">\n                        <div class="insight-header">\n                            <h4>‚è±Ô∏è Efficiency Trend</h4>\n                        </div>\n                        <div class="insight-content">\n                            <div class="metric-large">${efficiency.current_avg_hours||0}h</div>\n                            <div class="metric-label">Avg. Completion Time</div>\n                            <div class="insight-details">\n                                <p>Based on last 12 weeks of data</p>\n                                <p>${efficiency.current_avg_hours>24?"üìà Consider task breakdown":"‚úÖ Good task sizing"}</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div class="velocity-trend">\n                    <h4>üìä Velocity Trend</h4>\n                    <div id="velocityChart" class="mini-chart"></div>\n                </div>\n            </div>\n        `;container.innerHTML=html;if(velocity.velocity_trend&&velocity.velocity_trend.length>0){this.renderVelocityChart(velocity.velocity_trend)}}renderVelocityChart(data){const ctx=document.getElementById("velocityChart");if(!ctx)return;if(this.charts.velocity){this.charts.velocity.destroy()}const labels=data.map(item=>new Date(item.week).toLocaleDateString());const completedTasks=data.map(item=>parseInt(item.completed_tasks));this.charts.velocity=new Chart(ctx,{type:"line",data:{labels:labels,datasets:[{label:"Weekly Velocity",data:completedTasks,borderColor:"rgba(59, 130, 246, 1)",backgroundColor:"rgba(59, 130, 246, 0.1)",borderWidth:2,fill:true,tension:.4}]},options:{responsive:true,maintainAspectRatio:false,plugins:{legend:{display:false}},scales:{y:{beginAtZero:true,ticks:{stepSize:1}}}}})}updateRealTimeDashboard(data){this.updateRecentActivity(data.recent_activity||[]);this.updateUpcomingDeadlines(data.upcoming_deadlines||[]);this.updateTeamStatus(data.team_status||[]);if(data.overview){this.updateRealTimeOverview(data.overview)}const timestampEl=document.getElementById("lastUpdated");if(timestampEl){timestampEl.textContent=`Last updated: ${(new Date).toLocaleTimeString()}`}}updateRecentActivity(activities){const container=document.getElementById("recentActivity");if(!container)return;const html=`\n            <div class="activity-list">\n                ${activities.length===0?'<div class="empty-state"><p>No recent activity</p></div>':activities.map(activity=>`\n                        <div class="activity-item">\n                            <div class="activity-icon status-${activity.status}">\n                                ${this.getStatusIcon(activity.status)}\n                            </div>\n                            <div class="activity-content">\n                                <h5>${this.escapeHtml(activity.title)}</h5>\n                                <p>Updated by ${activity.assigned_to_name||"Unknown"}</p>\n                                <small>${this.formatTimeAgo(activity.updated_at)}</small>\n                            </div>\n                        </div>\n                    `).join("")}\n            </div>\n        `;container.innerHTML=html}updateUpcomingDeadlines(deadlines){const container=document.getElementById("upcomingDeadlines");if(!container)return;const html=`\n            <div class="deadlines-list">\n                ${deadlines.length===0?'<div class="empty-state"><p>No upcoming deadlines</p></div>':deadlines.map(task=>`\n                        <div class="deadline-item priority-${task.priority}">\n                            <div class="deadline-header">\n                                <h5>${this.escapeHtml(task.title)}</h5>\n                                <span class="priority-badge priority-${task.priority}">${task.priority}</span>\n                            </div>\n                            <div class="deadline-meta">\n                                <span class="due-date">üìÖ ${new Date(task.due_date).toLocaleDateString()}</span>\n                                <span class="assigned-to">üë§ ${task.assigned_to_name||"Unassigned"}</span>\n                                <span class="days-remaining">\n                                    ${Math.ceil(task.days_until_due)} day(s) remaining\n                                </span>\n                            </div>\n                        </div>\n                    `).join("")}\n            </div>\n        `;container.innerHTML=html}updateTeamStatus(teamMembers){const container=document.getElementById("teamStatus");if(!container)return;const html=`\n            <div class="team-status-grid">\n                ${teamMembers.map(member=>`\n                    <div class="team-member-card">\n                        <div class="member-avatar">${member.full_name.charAt(0)}</div>\n                        <div class="member-info">\n                            <h5>${member.full_name}</h5>\n                            <div class="member-stats">\n                                <span class="stat">\n                                    <strong>${member.active_tasks||0}</strong> active\n                                </span>\n                                <span class="stat">\n                                    <strong>${member.completed_today||0}</strong> completed today\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                `).join("")}\n            </div>\n        `;container.innerHTML=html}updateRealTimeOverview(overview){const elements={totalTasks:document.getElementById("rtTotalTasks"),completedToday:document.getElementById("rtCompletedToday"),inProgress:document.getElementById("rtInProgress"),dueThisWeek:document.getElementById("rtDueThisWeek")};if(elements.totalTasks)elements.totalTasks.textContent=overview.total_tasks||0;if(elements.completedToday)elements.completedToday.textContent=overview.completed_today||0;if(elements.inProgress)elements.inProgress.textContent=overview.in_progress||0;if(elements.dueThisWeek)elements.dueThisWeek.textContent=overview.due_this_week||0}getStatusIcon(status){const icons={completed:"‚úÖ","in-progress":"üîÑ",pending:"‚è≥",cancelled:"‚ùå"};return icons[status]||"üìã"}formatTimeAgo(dateString){const now=new Date;const date=new Date(dateString);const diffMs=now-date;const diffMins=Math.floor(diffMs/6e4);const diffHours=Math.floor(diffMs/36e5);const diffDays=Math.floor(diffMs/864e5);if(diffMins<1)return"Just now";if(diffMins<60)return`${diffMins}m ago`;if(diffHours<24)return`${diffHours}h ago`;return`${diffDays}d ago`}getDateParams(){const params={};const startInput=document.getElementById("reportStartDate");const endInput=document.getElementById("reportEndDate");if(startInput&&startInput.value){params.startDate=startInput.value;this.dateRange.start=startInput.value}else if(this.dateRange.start){params.startDate=this.dateRange.start}if(endInput&&endInput.value){params.endDate=endInput.value;this.dateRange.end=endInput.value}else if(this.dateRange.end){params.endDate=this.dateRange.end}console.log("üìÖ Date params:",params);return params}applyDateFilters(){const startInput=document.getElementById("reportStartDate");const endInput=document.getElementById("reportEndDate");if(startInput&&endInput){this.dateRange={start:startInput.value?new Date(startInput.value).toISOString():null,end:endInput.value?new Date(endInput.value).toISOString():null};this.loadAllReports();this.showNotification("Date filters applied successfully","success")}}resetDateFilters(){this.setDefaultDateRange();this.loadAllReports();this.showNotification("Date filters reset","info")}async exportReport(format){try{this.showLoadingState("Generating export...");const params={...this.getDateParams(),type:format,report:"comprehensive",includeDetails:"true"};if(format==="excel"){params.type="csv"}const response=await fetch(`${window.api.baseURL}/reports/export?${new URLSearchParams(params)}`,{headers:{Authorization:`Bearer ${window.api.authToken}`}});if(!response.ok){throw new Error("Export failed")}const blob=await response.blob();const url=window.URL.createObjectURL(blob);const a=document.createElement("a");a.style.display="none";a.href=url;const timestamp=(new Date).toISOString().split("T")[0];a.download=`taskflow-report-${timestamp}.${format==="excel"?"csv":format}`;document.body.appendChild(a);a.click();window.URL.revokeObjectURL(url);document.body.removeChild(a);window.showNotification(`Report exported successfully as ${format.toUpperCase()}!`,"success")}catch(error){console.error("Export error:",error);window.showNotification("Failed to export report","error")}finally{this.hideLoadingState()}}async refreshAllReports(){await this.loadAllReports();window.showNotification("Reports refreshed successfully","success")}startRealTimeUpdates(){if(this.refreshInterval)return;this.refreshInterval=setInterval(()=>{this.loadAllReports()},3e4);window.showNotification("Real-time updates enabled","info")}stopRealTimeUpdates(){if(this.refreshInterval){clearInterval(this.refreshInterval);this.refreshInterval=null}this.showNotification("Real-time updates disabled","info")}setupAutoRefresh(){setInterval(()=>{if(document.visibilityState==="visible"&&!this.isLoading){this.loadAllReports()}},5*60*1e3)}showLoadingState(message="Loading reports..."){const loadingElements=document.querySelectorAll(".chart-container, .report-section");loadingElements.forEach(el=>{if(!el.querySelector(".loading-overlay")){const overlay=document.createElement("div");overlay.className="loading-overlay";overlay.innerHTML=`\n                    <div class="loading-spinner"></div>\n                    <p>${message}</p>\n                `;el.appendChild(overlay)}})}hideLoadingState(){const overlays=document.querySelectorAll(".loading-overlay");overlays.forEach(overlay=>overlay.remove())}showErrorState(message){console.error("Reports error:",message);this.showNotification(message,"error")}showNotification(message,type="info"){if(window.showNotification){window.showNotification(message,type)}}capitalizePriority(priority){return priority.charAt(0).toUpperCase()+priority.slice(1)}escapeHtml(text){const div=document.createElement("div");div.textContent=text;return div.innerHTML}destroy(){Object.values(this.charts).forEach(chart=>{if(chart)chart.destroy()});if(this.refreshInterval){clearInterval(this.refreshInterval)}console.log("üìä Reports Manager destroyed")}}document.addEventListener("DOMContentLoaded",()=>{if(document.getElementById("reports")){window.reportsManager=new ReportsManager}});window.refreshReports=function(){if(window.reportsManager){window.reportsManager.refreshAllReports()}};window.exportReport=function(format){if(window.reportsManager){window.reportsManager.exportReport(format)}};if(typeof module!=="undefined"&&module.exports){module.exports=ReportsManager}window.authManager=new AuthManager;class TaskManager{constructor(){this.tasks=[];this.users=[];this.currentFilters={};this.currentEditingTask=null;this.refreshInterval=null;this.notificationIntervals={};this.init=this.init.bind(this);this.loadTasks=this.loadTasks.bind(this);this.loadUsers=this.loadUsers.bind(this);this.loadDashboardStats=this.loadDashboardStats.bind(this);this.scheduleDeadlineNotifications=this.scheduleDeadlineNotifications.bind(this);this.clearAllNotificationIntervals=this.clearAllNotificationIntervals.bind(this)}async init(){try{const user=this.authManager.getUser();if(user&&typeof wsClient!=="undefined"){wsClient.connect(user.id)}console.log("üöÄ Initializing TaskManager...");await Promise.all([this.loadUsers(),this.loadTasks(),this.loadDashboardStats()]);this.setupEventListeners();this.setupAutoRefresh();this.renderTaskViewToggle();console.log("‚úÖ TaskManager initialized successfully")}catch(error){console.error("‚ùå Failed to initialize TaskManager:",error);showNotification("Failed to load application data. Please refresh the page.","error")}}setupEventListeners(){const taskForm=document.getElementById("taskForm");if(taskForm){taskForm.addEventListener("submit",e=>{e.preventDefault();this.handleTaskSubmit()})}const searchInput=document.getElementById("searchTasks");if(searchInput){let searchTimeout;searchInput.addEventListener("input",()=>{clearTimeout(searchTimeout);searchTimeout=setTimeout(()=>this.filterTasks(),300)})}document.addEventListener("click",e=>{if(e.target.classList.contains("modal")){this.closeAllModals()}});document.addEventListener("keydown",e=>{this.handleKeyboardShortcuts(e)});window.addEventListener("beforeunload",()=>{this.clearAllTimerIntervals()})}setupAutoRefresh(){this.refreshInterval=setInterval(async()=>{if(document.visibilityState==="visible"){await this.loadDashboardStats();const activeTab=document.querySelector(".tab-content.active");if(activeTab&&activeTab.id==="tasks"){await this.loadTasks()}}},3e4)}async loadUsers(){try{const response=await window.api.getUsers();this.users=response.users||response;this.populateUserSelects();this.renderTeamGrid();console.log(`üë• Loaded ${this.users.length} users`)}catch(error){console.error("‚ùå Failed to load users:",error);showNotification("Failed to load team members.","error")}}async loadTasks(){try{this.clearAllTimerIntervals();const response=await window.api.getTasks(this.currentFilters);this.tasks=response.tasks||response;this.renderTasks();this.scheduleDeadlineNotifications();this.checkOverdueTasksAndAlert();console.log(`üìã Loaded ${this.tasks.length} tasks`)}catch(error){console.error("‚ùå Failed to load tasks:",error);this.renderTasksError();showNotification("Failed to load tasks.","error")}}async loadDashboardStats(){try{const stats=await window.api.getDashboardStats();this.updateDashboard(stats)}catch(error){console.error("‚ùå Failed to load dashboard stats:",error)}}populateUserSelects(){const selects=document.querySelectorAll("#taskAssignTo");selects.forEach(select=>{select.innerHTML='<option value="">Select team member</option>';this.users.forEach(user=>{const option=document.createElement("option");option.value=user.id;const isCurrentUser=window.authManager.getCurrentUser()?.id===user.id;option.textContent=`${user.full_name} ${isCurrentUser?"(Me)":""}`;select.appendChild(option)})})}async handleTaskSubmit(){try{const taskData=this.getTaskFormData();if(!taskData.title.trim()){showNotification("Task title is required.","error");return}if(!taskData.assignedTo){showNotification("Please select a team member to assign the task.","error");return}this.setTaskFormLoading(true);let response;let isNewTask=false;let assignedUserId=taskData.assignedTo;let assignedUserName="";if(this.currentEditingTask){response=await window.api.updateTask(this.currentEditingTask.id,taskData);showNotification("Task updated successfully!","success");if(this.currentEditingTask.assigned_to!==assignedUserId){assignedUserName=this.users.find(u=>u.id===assignedUserId)?.full_name||"";this.notifyTaskAssignment(taskData.title,assignedUserId,assignedUserName)}}else{response=await window.api.createTask(taskData);showNotification("Task created successfully!","success");isNewTask=true;assignedUserName=this.users.find(u=>u.id===assignedUserId)?.full_name||"";this.notifyTaskAssignment(taskData.title,assignedUserId,assignedUserName)}await Promise.all([this.loadTasks(),this.loadDashboardStats()]);this.closeTaskModal()}catch(error){console.error("‚ùå Task submit error:",error);showNotification(error.getUserMessage(),"error")}finally{this.setTaskFormLoading(false)}}getTaskFormData(){return{title:document.getElementById("taskTitle").value.trim(),description:document.getElementById("taskDescription").value.trim()||null,assignedTo:parseInt(document.getElementById("taskAssignTo").value)||null,priority:document.getElementById("taskPriority").value,category:document.getElementById("taskCategory").value,estimatedHours:parseFloat(document.getElementById("taskEstimatedHours").value)||1,dueDate:document.getElementById("taskDueDate").value||null,tags:document.getElementById("taskTags").value.split(",").map(tag=>tag.trim()).filter(tag=>tag)}}setTaskFormLoading(isLoading){const submitBtn=document.getElementById("taskSubmitBtn");if(!submitBtn)return;const textSpan=submitBtn.querySelector(".btn-text");const loaderSpan=submitBtn.querySelector(".btn-loader");if(isLoading){submitBtn.disabled=true;if(textSpan)textSpan.style.display="none";if(loaderSpan){loaderSpan.style.display="flex"}}else{submitBtn.disabled=false;if(textSpan)textSpan.style.display="block";if(loaderSpan)loaderSpan.style.display="none"}}async completeTask(taskId){try{await window.api.updateTask(taskId,{status:"completed"});const task=this.tasks.find(t=>t.id===taskId);if(task){task.status="completed";task.completed_at=(new Date).toISOString()}this.clearNotificationInterval(taskId);await Promise.all([this.loadTasks(),this.loadDashboardStats()]);showNotification("Task completed! üéâ","success")}catch(error){console.error("‚ùå Complete task error:",error);showNotification(error.getUserMessage(),"error")}}async deleteTask(taskId){if(!confirm("Are you sure you want to delete this task? This action cannot be undone.")){return}try{await window.api.deleteTask(taskId);this.tasks=this.tasks.filter(t=>t.id!==taskId);this.clearNotificationInterval(taskId);await Promise.all([this.loadTasks(),this.loadDashboardStats()]);showNotification("Task deleted successfully.","info")}catch(error){console.error("‚ùå Delete task error:",error);showNotification(error.getUserMessage(),"error")}}editTask(taskId){const task=this.tasks.find(t=>t.id===taskId);if(!task){showNotification("Task not found.","error");return}this.currentEditingTask=task;this.populateTaskForm(task);this.openTaskModal("Edit Task")}populateTaskForm(task){document.getElementById("taskTitle").value=task.title||"";document.getElementById("taskDescription").value=task.description||"";document.getElementById("taskAssignTo").value=task.assigned_to||"";document.getElementById("taskPriority").value=task.priority||"medium";document.getElementById("taskCategory").value=task.category||"general";document.getElementById("taskEstimatedHours").value=task.estimated_hours||1;if(task.due_date){document.getElementById("taskDueDate").value=this.formatDateTimeLocal(task.due_date)}const tags=task.tags?task.tags.filter(tag=>tag).join(", "):"";document.getElementById("taskTags").value=tags}formatDateTimeLocal(dateString){const date=new Date(dateString);const year=date.getFullYear();const month=String(date.getMonth()+1).padStart(2,"0");const day=String(date.getDate()).padStart(2,"0");const hours=String(date.getHours()).padStart(2,"0");const minutes=String(date.getMinutes()).padStart(2,"0");return`${year}-${month}-${day}T${hours}:${minutes}`}async filterTasks(){const statusFilter=document.getElementById("statusFilter").value;const priorityFilter=document.getElementById("priorityFilter").value;const searchQuery=document.getElementById("searchTasks").value.trim();this.currentFilters={};if(statusFilter)this.currentFilters.status=statusFilter;if(priorityFilter)this.currentFilters.priority=priorityFilter;await this.loadTasks();if(searchQuery){this.tasks=this.tasks.filter(task=>task.title.toLowerCase().includes(searchQuery.toLowerCase())||task.description&&task.description.toLowerCase().includes(searchQuery.toLowerCase())||task.assigned_to_name&&task.assigned_to_name.toLowerCase().includes(searchQuery.toLowerCase()))}this.renderTasks()}searchTasks(){this.filterTasks()}renderTasks(){const tasksList=document.getElementById("tasksList");if(!tasksList)return;const currentUser=window.authManager.getCurrentUser&&window.authManager.getCurrentUser();let filteredTasks=[];if(this.currentTaskView==="assigned"){filteredTasks=this.tasks.filter(task=>task.assigned_to===currentUser?.id)}else if(this.currentTaskView==="pending"){filteredTasks=this.tasks.filter(task=>task.status!=="completed")}const sortBy=document.getElementById("sortTasks")?.value||"priority";filteredTasks.sort((a,b)=>{switch(sortBy){case"priority":const priorityOrder={critical:5,high:4,medium:3,low:2,lowest:1};const aPriority=priorityOrder[a.priority]||3;const bPriority=priorityOrder[b.priority]||3;if(aPriority!==bPriority){return bPriority-aPriority}const now=new Date;const aDue=a.due_date?new Date(a.due_date):null;const bDue=b.due_date?new Date(b.due_date):null;if(!aDue&&!bDue)return 0;if(!aDue)return 1;if(!bDue)return-1;return aDue-bDue;case"due_date":const aDate=a.due_date?new Date(a.due_date):null;const bDate=b.due_date?new Date(b.due_date):null;if(!aDate&&!bDate)return 0;if(!aDate)return 1;if(!bDate)return-1;return aDate-bDate;case"created_at":return new Date(b.created_at)-new Date(a.created_at);case"title":return a.title.localeCompare(b.title);default:return 0}});if(filteredTasks.length===0){tasksList.innerHTML=this.getEmptyTasksHTML();return}const tasksHTML=filteredTasks.map(task=>this.renderTask(task)).join("");tasksList.innerHTML=tasksHTML;setTimeout(()=>{filteredTasks.forEach(task=>{this.updateTimerDisplay(task.id)})},100)}renderTask(task){const priorityClass=`priority-${task.priority}`;const dueDate=task.due_date?new Date(task.due_date).toLocaleDateString():"No due date";const assignedToName=task.assigned_to_name||"Unassigned";const tags=task.tags?task.tags.filter(tag=>tag).map(tag=>`<span class="task-tag">${this.escapeHtml(tag)}</span>`).join(""):"";const isCompleted=task.status==="completed";const canEdit=task.created_by===window.authManager.getCurrentUser()?.id||task.assigned_to===window.authManager.getCurrentUser()?.id;const currentUser=window.authManager.getCurrentUser();const isAssignedToCurrentUser=currentUser&&task.assigned_to===currentUser.id;const now=new Date;let dueStatus="";let dueIndicator="";let taskClasses=`task-item ${priorityClass}`;if(isAssignedToCurrentUser){taskClasses+=" assigned-to-me"}if(task.due_date&&!isCompleted){const dueDateTime=new Date(task.due_date);const msToDue=dueDateTime-now;const daysToDue=Math.ceil(msToDue/(1e3*60*60*24));if(msToDue<0){const daysOverdue=Math.abs(daysToDue);dueStatus="overdue";taskClasses+=" overdue";dueIndicator=`<span class="due-indicator overdue">üö® ${daysOverdue} day${daysOverdue>1?"s":""} overdue</span>`}else if(msToDue<=24*60*60*1e3){dueStatus="due-soon";taskClasses+=" due-soon";const hoursLeft=Math.ceil(msToDue/(1e3*60*60));dueIndicator=`<span class="due-indicator due-soon">‚è∞ Due in ${hoursLeft}h</span>`}else if(daysToDue<=7){dueIndicator=`<span class="due-indicator due-later">üìÖ Due in ${daysToDue} day${daysToDue>1?"s":""}</span>`}}const timeControls=!isCompleted?`\n            <div class="task-timer" id="task-timer-${task.id}">\n                <span class="timer-display" id="timer-display-${task.id}">--:--:--</span>\n                <span class="timer-total" id="timer-total-${task.id}" style="margin-left:8px;font-size:0.9em;color:#888;">Total: --:--:--</span>\n                <button class="btn btn-small btn-primary" onclick="taskManager.startTimer(${task.id})">‚ñ∂Ô∏è Start</button>\n                <button class="btn btn-small btn-warning" onclick="taskManager.pauseTimer(${task.id})">‚è∏Ô∏è Pause</button>\n                <button class="btn btn-small btn-danger" onclick="taskManager.stopTimer(${task.id})">‚èπÔ∏è Stop</button>\n            </div>\n        `:"";return`\n            <div class="${taskClasses}" data-task-id="${task.id}">\n                <div class="task-header">\n                    <div class="task-title">\n                        ${this.escapeHtml(task.title)}\n                        ${dueIndicator}\n                    </div>\n                    <div class="task-priority ${priorityClass}">${task.priority}</div>\n                </div>\n                \n                ${task.description?`<div class="task-description">${this.escapeHtml(task.description)}</div>`:""}\n                \n                <div class="task-meta">\n                    <span>üë§ ${this.escapeHtml(assignedToName)}</span>\n                    <span>üìÖ ${dueDate}</span>\n                    <span>‚è±Ô∏è ${task.estimated_hours}h</span>\n                    <span>üìÇ ${this.escapeHtml(task.category)}</span>\n                    ${task.assigned_at?`<span>üìã Assigned ${new Date(task.assigned_at).toLocaleDateString()}</span>`:""}\n                    ${task.created_by_name?`<span>üë®‚Äçüíº Created by ${this.escapeHtml(task.created_by_name)}</span>`:""}\n                    ${isAssignedToCurrentUser&&task.assigned_by_name?`<span class="assignment-info">‚úã Assigned by ${this.escapeHtml(task.assigned_by_name)}</span>`:""}\n                </div>\n                \n                ${tags?`<div class="task-tags">${tags}</div>`:""}\n                \n                <div class="task-actions">\n                    ${!isCompleted?`<button class="btn btn-success btn-small" onclick="taskManager.completeTask(${task.id})">\n                            ‚úÖ Complete\n                        </button>`:`<span style="color: var(--success-color); font-weight: 600;">‚úÖ Completed</span>`}\n                    ${canEdit?`<button class="btn btn-secondary btn-small" onclick="taskManager.editTask(${task.id})">\n                            ‚úèÔ∏è Edit\n                        </button>`:""}\n                    ${task.created_by===window.authManager.getCurrentUser()?.id?`<button class="btn btn-danger btn-small" onclick="taskManager.deleteTask(${task.id})">\n                            üóëÔ∏è Delete\n                        </button>`:""}\n                </div>\n                ${timeControls}\n            </div>\n        `}renderTasksError(){const tasksList=document.getElementById("tasksList");if(!tasksList)return;tasksList.innerHTML=`\n            <div class="empty-state">\n                <div style="font-size: 4rem; margin-bottom: 16px;">‚ùå</div>\n                <h3>Failed to Load Tasks</h3>\n                <p>There was an error loading your tasks. Please try refreshing the page.</p>\n                <button class="btn btn-primary" onclick="taskManager.loadTasks()" style="margin-top: 1rem;">\n                    üîÑ Retry\n                </button>\n            </div>\n        `}getEmptyTasksHTML(){const hasFilters=Object.keys(this.currentFilters).length>0||document.getElementById("searchTasks").value.trim();if(hasFilters){return`\n                <div class="empty-state">\n                    <div style="font-size: 4rem; margin-bottom: 16px;">üîç</div>\n                    <h3>No Tasks Found</h3>\n                    <p>No tasks match your current filters. Try adjusting your search criteria.</p>\n                    <button class="btn btn-secondary" onclick="taskManager.clearFilters()" style="margin-top: 1rem;">\n                        Clear Filters\n                    </button>\n                </div>\n            `}return`\n            <div class="empty-state">\n                <div style="font-size: 4rem; margin-bottom: 16px;">üìù</div>\n                <h3>No Tasks Yet</h3>\n                <p>Create your first task to get started with task management!</p>\n                <button class="btn btn-primary" onclick="openCreateTaskModal()" style="margin-top: 1rem;">\n                    ‚ûï Create First Task\n                </button>\n            </div>\n        `}clearFilters(){document.getElementById("statusFilter").value="";document.getElementById("priorityFilter").value="";document.getElementById("searchTasks").value="";document.getElementById("sortTasks").value="priority";this.currentFilters={};this.loadTasks()}updateDashboard(stats){const elements={totalTasks:document.getElementById("totalTasks"),completedTasks:document.getElementById("completedTasks"),inProgressTasks:document.getElementById("inProgressTasks"),assignedToMe:document.getElementById("assignedToMe"),assignedByMe:document.getElementById("assignedByMe"),timeToday:document.getElementById("timeToday")};Object.keys(elements).forEach(key=>{if(elements[key]&&stats[key]!==undefined){elements[key].textContent=stats[key]}});Object.values(elements).forEach(el=>{if(el){el.classList.add("animate-pulse");setTimeout(()=>el.classList.remove("animate-pulse"),1e3)}})}renderTeamGrid(){const teamGrid=document.getElementById("teamGrid");const teamCount=document.getElementById("teamCount");if(!teamGrid)return;if(teamCount){teamCount.textContent=this.users.length}if(this.users.length===0){teamGrid.innerHTML=`\n                <div class="empty-state">\n                    <div style="font-size: 4rem; margin-bottom: 16px;">üë•</div>\n                    <h3>No Team Members</h3>\n                    <p>No team members found.</p>\n                </div>\n            `;return}const membersHTML=this.users.map(user=>this.renderTeamMember(user)).join("");teamGrid.innerHTML=membersHTML}renderTeamMember(user){const initials=this.getUserInitials(user.full_name||user.username);const isCurrentUser=user.id===window.authManager.getCurrentUser()?.id;return`\n            <div class="team-member">\n                <div class="member-avatar">${initials}</div>\n                <div class="member-name">${this.escapeHtml(user.full_name||user.username)}</div>\n                <div class="member-email">${this.escapeHtml(user.email)}</div>\n                <div class="member-role">${this.escapeHtml(user.role||"User")}${isCurrentUser?" (You)":""}</div>\n            </div>\n        `}getUserInitials(name){return name.split(" ").map(n=>n.charAt(0)).join("").toUpperCase().slice(0,2)}handleKeyboardShortcuts(e){if((e.ctrlKey||e.metaKey)&&e.key==="n"){e.preventDefault();openCreateTaskModal()}if(e.key==="Escape"){this.closeAllModals()}if((e.ctrlKey||e.metaKey)&&e.key==="r"){e.preventDefault();this.refreshAll()}}async refreshAll(){const refreshIcon=document.getElementById("refreshIcon");if(refreshIcon){refreshIcon.style.animation="spin 1s linear infinite"}try{await Promise.all([this.loadUsers(),this.loadTasks(),this.loadDashboardStats()]);showNotification("Data refreshed successfully!","success")}catch(error){showNotification("Failed to refresh data.","error")}finally{if(refreshIcon){setTimeout(()=>{refreshIcon.style.animation=""},1e3)}}}closeAllModals(){document.querySelectorAll(".modal.active").forEach(modal=>{modal.classList.remove("active")});this.resetTaskForm()}resetTaskForm(){const form=document.getElementById("taskForm");if(form){form.reset()}this.currentEditingTask=null;const estimatedHours=document.getElementById("taskEstimatedHours");if(estimatedHours){estimatedHours.value="1.0"}const priority=document.getElementById("taskPriority");if(priority){priority.value="medium"}}openTaskModal(title="Create New Task"){const modal=document.getElementById("taskModal");const modalTitle=document.getElementById("modalTitle");const submitBtn=document.getElementById("taskSubmitBtn");if(modalTitle){modalTitle.textContent=title}if(submitBtn){const textSpan=submitBtn.querySelector(".btn-text");if(textSpan){textSpan.textContent=title.includes("Edit")?"Update Task":"Create Task"}}if(modal){modal.classList.add("active")}this.setDefaultDates();setTimeout(()=>{const titleField=document.getElementById("taskTitle");if(titleField){titleField.focus()}},100)}closeTaskModal(){const modal=document.getElementById("taskModal");if(modal){modal.classList.remove("active")}this.resetTaskForm()}setDefaultDates(){if(this.currentEditingTask)return;const now=new Date;now.setMinutes(now.getMinutes()-now.getTimezoneOffset());const startDateInput=document.getElementById("taskStartDate");if(startDateInput&&!startDateInput.value){startDateInput.value=now.toISOString().slice(0,16)}const tomorrow=new Date(now);tomorrow.setDate(tomorrow.getDate()+1);const dueDateInput=document.getElementById("taskDueDate");if(dueDateInput&&!dueDateInput.value){dueDateInput.value=tomorrow.toISOString().slice(0,16)}}escapeHtml(text){const div=document.createElement("div");div.textContent=text;return div.innerHTML}destroy(){if(this.refreshInterval){clearInterval(this.refreshInterval)}this.clearAllNotificationIntervals()}timerIntervals={};timerStates={};async startTimer(taskId){try{const startButton=document.querySelector(`button[onclick="taskManager.startTimer(${taskId})"]`);const pauseButton=document.querySelector(`button[onclick="taskManager.pauseTimer(${taskId})"]`);const stopButton=document.querySelector(`button[onclick="taskManager.stopTimer(${taskId})"]`);if(startButton){startButton.disabled=true;startButton.innerHTML="‚è≥ Starting..."}await window.api.request(`/tasks/${taskId}/time/start`,{method:"POST"});if(startButton){startButton.disabled=true;startButton.innerHTML="‚ñ∂Ô∏è Running";startButton.style.opacity="0.6"}if(pauseButton){pauseButton.disabled=false;pauseButton.style.opacity="1"}if(stopButton){stopButton.disabled=false;stopButton.style.opacity="1"}this.timerStates[taskId]={running:true,startTime:new Date};await this.updateTimerDisplay(taskId);showNotification("Timer started! ‚è∞","success")}catch(error){console.error("Start timer error:",error);showNotification("Failed to start timer","error");const startButton=document.querySelector(`button[onclick="taskManager.startTimer(${taskId})"]`);if(startButton){startButton.disabled=false;startButton.innerHTML="‚ñ∂Ô∏è Start"}}}async pauseTimer(taskId){try{const startButton=document.querySelector(`button[onclick="taskManager.startTimer(${taskId})"]`);const pauseButton=document.querySelector(`button[onclick="taskManager.pauseTimer(${taskId})"]`);const stopButton=document.querySelector(`button[onclick="taskManager.stopTimer(${taskId})"]`);if(pauseButton){pauseButton.disabled=true;pauseButton.innerHTML="‚è≥ Pausing..."}await window.api.request(`/tasks/${taskId}/time/pause`,{method:"POST"});if(startButton){startButton.disabled=false;startButton.innerHTML="‚ñ∂Ô∏è Start";startButton.style.opacity="1"}if(pauseButton){pauseButton.disabled=true;pauseButton.innerHTML="‚è∏Ô∏è Paused";pauseButton.style.opacity="0.6"}if(stopButton){stopButton.disabled=false;stopButton.style.opacity="1"}this.timerStates[taskId]={running:false};this.clearTimerInterval(taskId);await this.updateTimerDisplay(taskId,true);showNotification("Timer paused ‚è∏Ô∏è","info")}catch(error){console.error("Pause timer error:",error);showNotification("Failed to pause timer","error");const pauseButton=document.querySelector(`button[onclick="taskManager.pauseTimer(${taskId})"]`);if(pauseButton){pauseButton.disabled=false;pauseButton.innerHTML="‚è∏Ô∏è Pause"}}}async stopTimer(taskId){try{const startButton=document.querySelector(`button[onclick="taskManager.startTimer(${taskId})"]`);const pauseButton=document.querySelector(`button[onclick="taskManager.pauseTimer(${taskId})"]`);const stopButton=document.querySelector(`button[onclick="taskManager.stopTimer(${taskId})"]`);if(stopButton){stopButton.disabled=true;stopButton.innerHTML="‚è≥ Stopping..."}await window.api.request(`/tasks/${taskId}/time/stop`,{method:"POST"});if(startButton){startButton.disabled=false;startButton.innerHTML="‚ñ∂Ô∏è Start";startButton.style.opacity="1"}if(pauseButton){pauseButton.disabled=true;pauseButton.innerHTML="‚è∏Ô∏è Pause";pauseButton.style.opacity="0.6"}if(stopButton){stopButton.disabled=true;stopButton.innerHTML="‚èπÔ∏è Stop";stopButton.style.opacity="0.6"}this.timerStates[taskId]={running:false};this.clearTimerInterval(taskId);await this.updateTimerDisplay(taskId,true);showNotification("Timer stopped ‚èπÔ∏è","info")}catch(error){console.error("Stop timer error:",error);showNotification("Failed to stop timer","error");const stopButton=document.querySelector(`button[onclick="taskManager.stopTimer(${taskId})"]`);if(stopButton){stopButton.disabled=false;stopButton.innerHTML="‚èπÔ∏è Stop"}}}clearTimerInterval(taskId){if(this.timerIntervals[taskId]){clearInterval(this.timerIntervals[taskId]);delete this.timerIntervals[taskId]}}clearAllTimerIntervals(){Object.keys(this.timerIntervals).forEach(taskId=>{clearInterval(this.timerIntervals[taskId])});this.timerIntervals={}}async updateTimerDisplay(taskId,reset=false){try{const[activeRes,historyRes]=await Promise.all([window.api.request(`/tasks/${taskId}/time/active`),window.api.request(`/tasks/${taskId}/time/history`)]);const timerDisplay=document.getElementById(`timer-display-${taskId}`);const timerTotal=document.getElementById(`timer-total-${taskId}`);if(!timerDisplay||!timerTotal)return;let totalSeconds=0;if(historyRes.history&&Array.isArray(historyRes.history)){totalSeconds=historyRes.history.reduce((sum,entry)=>sum+(entry.duration?Math.floor(entry.duration*60):0),0)}const activeEntry=activeRes.entry;if(activeEntry&&activeEntry.start_time&&!activeEntry.end_time){const startTime=new Date(activeEntry.start_time);const updateDisplay=()=>{const now=new Date;const currentSessionSeconds=Math.floor((now-startTime)/1e3);const totalWithCurrent=totalSeconds+currentSessionSeconds;timerDisplay.textContent=this.formatSeconds(currentSessionSeconds);timerDisplay.style.color="#28a745";timerTotal.textContent=`Total: ${this.formatSeconds(totalWithCurrent)}`;timerDisplay.style.fontWeight="bold";if(!timerDisplay.classList.contains("timer-running")){timerDisplay.classList.add("timer-running")}};updateDisplay();this.clearTimerInterval(taskId);this.timerIntervals[taskId]=setInterval(updateDisplay,1e3);this.updateTimerButtons(taskId,"running")}else{timerDisplay.textContent="00:00:00";timerDisplay.style.color="#6c757d";timerDisplay.style.fontWeight="normal";timerDisplay.classList.remove("timer-running");timerTotal.textContent=`Total: ${this.formatSeconds(totalSeconds)}`;this.clearTimerInterval(taskId);this.updateTimerButtons(taskId,"stopped")}}catch(error){console.error(`Error updating timer display for task ${taskId}:`,error);const timerDisplay=document.getElementById(`timer-display-${taskId}`);const timerTotal=document.getElementById(`timer-total-${taskId}`);if(timerDisplay)timerDisplay.textContent="--:--:--";if(timerTotal)timerTotal.textContent="Total: --:--:--"}}updateTimerButtons(taskId,state){const startButton=document.querySelector(`button[onclick="taskManager.startTimer(${taskId})"]`);const pauseButton=document.querySelector(`button[onclick="taskManager.pauseTimer(${taskId})"]`);const stopButton=document.querySelector(`button[onclick="taskManager.stopTimer(${taskId})"]`);if(state==="running"){if(startButton){startButton.disabled=true;startButton.innerHTML="‚ñ∂Ô∏è Running";startButton.style.opacity="0.6"}if(pauseButton){pauseButton.disabled=false;pauseButton.innerHTML="‚è∏Ô∏è Pause";pauseButton.style.opacity="1"}if(stopButton){stopButton.disabled=false;stopButton.innerHTML="‚èπÔ∏è Stop";stopButton.style.opacity="1"}}else{if(startButton){startButton.disabled=false;startButton.innerHTML="‚ñ∂Ô∏è Start";startButton.style.opacity="1"}if(pauseButton){pauseButton.disabled=true;pauseButton.innerHTML="‚è∏Ô∏è Pause";pauseButton.style.opacity="0.6"}if(stopButton){stopButton.disabled=true;stopButton.innerHTML="‚èπÔ∏è Stop";stopButton.style.opacity="0.6"}}}formatSeconds(seconds){const h=String(Math.floor(seconds/3600)).padStart(2,"0");const m=String(Math.floor(seconds%3600/60)).padStart(2,"0");const s=String(seconds%60).padStart(2,"0");return`${h}:${m}:${s}`}async scheduleDeadlineNotifications(){if(typeof Notification!=="undefined"&&Notification.permission==="default"){try{await Notification.requestPermission()}catch(e){}}this.clearAllNotificationIntervals();if(typeof Notification==="undefined"||Notification.permission!=="granted")return;const now=new Date;const currentUser=window.authManager?.getCurrentUser?.();this.tasks.forEach(task=>{if(!task.due_date||task.status==="completed")return;if(currentUser&&task.assigned_to!==currentUser.id)return;const due=new Date(task.due_date);const msToDue=due-now;if(msToDue>0&&msToDue<=24*60*60*1e3){const notify=()=>{new Notification("Task Deadline Approaching",{body:`Task "${task.title}" is due at ${due.toLocaleString()}. Please complete it soon!`,tag:`task-deadline-${task.id}`})};if(msToDue<=2*60*60*1e3){notify();this.notificationIntervals[task.id]=setInterval(()=>{const t=this.tasks.find(t=>t.id===task.id);if(t&&t.status!=="completed"){notify()}else{this.clearNotificationInterval(task.id)}},2*60*60*1e3)}else{const firstTimeout=msToDue-2*60*60*1e3;this.notificationIntervals[task.id]=setTimeout(()=>{notify();this.notificationIntervals[task.id]=setInterval(()=>{const t=this.tasks.find(t=>t.id===task.id);if(t&&t.status!=="completed"){notify()}else{this.clearNotificationInterval(task.id)}},2*60*60*1e3)},firstTimeout)}}})}clearNotificationInterval(taskId){const interval=this.notificationIntervals[taskId];if(interval){clearInterval(interval);clearTimeout(interval);delete this.notificationIntervals[taskId]}}clearAllNotificationIntervals(){Object.keys(this.notificationIntervals).forEach(taskId=>{this.clearNotificationInterval(taskId)})}async notifyTaskAssignment(taskTitle,assignedUserId,assignedUserName){if(typeof Notification==="undefined")return;const currentUser=window.authManager?.getCurrentUser?.();if(!currentUser||currentUser.id!==assignedUserId)return;if(Notification.permission==="default"){try{await Notification.requestPermission()}catch(e){}}if(Notification.permission==="granted"){new Notification("New Task Assigned",{body:`You have been assigned a new task: "${taskTitle}"`,tag:`task-assigned-${taskTitle}`})}}checkOverdueTasksAndAlert(){const now=new Date;const currentUser=window.authManager?.getCurrentUser?.();if(!currentUser)return;const overdueTasks=this.tasks.filter(task=>{if(!task.due_date||task.status==="completed")return false;if(task.assigned_to!==currentUser.id)return false;const dueDate=new Date(task.due_date);return dueDate<now});const dueSoonTasks=this.tasks.filter(task=>{if(!task.due_date||task.status==="completed")return false;if(task.assigned_to!==currentUser.id)return false;const dueDate=new Date(task.due_date);const msToDue=dueDate-now;return msToDue>0&&msToDue<=24*60*60*1e3});if(overdueTasks.length>0){const overdueCount=overdueTasks.length;const message=`üö® You have ${overdueCount} overdue task${overdueCount>1?"s":""}!`;showNotification(message,"error");setTimeout(()=>{this.showOverdueTasksModal(overdueTasks)},2e3)}if(dueSoonTasks.length>0){const dueSoonCount=dueSoonTasks.length;const message=`‚è∞ You have ${dueSoonCount} task${dueSoonCount>1?"s":""} due within 24 hours.`;showNotification(message,"warning")}}showOverdueTasksModal(overdueTasks){if(overdueTasks.length===0)return;const modal=document.createElement("div");modal.className="modal overdue-modal active";modal.innerHTML=`\n            <div class="modal-content">\n                <div class="modal-header">\n                    <h2>üö® Overdue Tasks</h2>\n                    <button class="close-btn" onclick="this.closest('.modal').remove()">&times;</button>\n                </div>\n                <div class="overdue-tasks-list">\n                    ${overdueTasks.map(task=>{const daysOverdue=Math.floor((new Date-new Date(task.due_date))/(1e3*60*60*24));return`\n                            <div class="overdue-task-item">\n                                <div class="task-info">\n                                    <div class="task-title">${this.escapeHtml(task.title)}</div>\n                                    <div class="task-due">\n                                        Due: ${new Date(task.due_date).toLocaleDateString()} \n                                        (${daysOverdue} day${daysOverdue>1?"s":""} overdue)\n                                    </div>\n                                    <div class="task-priority priority-${task.priority}">${task.priority} priority</div>\n                                </div>\n                                <div class="task-actions">\n                                    <button class="btn btn-small btn-primary" onclick="taskManager.editTask(${task.id}); this.closest('.modal').remove();">\n                                        Edit Task\n                                    </button>\n                                    <button class="btn btn-small btn-success" onclick="taskManager.completeTask(${task.id}); this.closest('.modal').remove();">\n                                        Mark Complete\n                                    </button>\n                                </div>\n                            </div>\n                        `}).join("")}\n                </div>\n                <div class="modal-actions">\n                    <button class="btn btn-secondary" onclick="this.closest('.modal').remove()">\n                        Close\n                    </button>\n                </div>\n            </div>\n        `;document.body.appendChild(modal);setTimeout(()=>{if(modal.parentNode){modal.remove()}},3e4)}}TaskManager.prototype.currentTaskView="assigned";TaskManager.prototype.renderTaskViewToggle=function(){const container=document.getElementById("taskViewToggle");if(!container)return;container.innerHTML=`\n        <button class="btn btn-small${this.currentTaskView==="assigned"?" btn-primary":""}" onclick="taskManager.setTaskView('assigned')">Assigned to Me</button>\n        <button class="btn btn-small${this.currentTaskView==="pending"?" btn-primary":""}" onclick="taskManager.setTaskView('pending')">Pending Tasks</button>\n    `};TaskManager.prototype.setTaskView=function(view){this.currentTaskView=view;this.renderTaskViewToggle();this.renderTasks()};TaskManager.prototype.renderTasks=function(){const tasksList=document.getElementById("tasksList");if(!tasksList)return;const currentUser=window.authManager.getCurrentUser&&window.authManager.getCurrentUser();console.log("Current user:",currentUser);let filteredTasks=[];if(this.currentTaskView==="assigned"){filteredTasks=this.tasks.filter(task=>{const assignedTo=task.assigned_to!==undefined?task.assigned_to:task.assignedTo;const match=String(assignedTo)===String(currentUser?.id);if(!match){console.log(`Task ${task.id} not shown: assigned_to=${assignedTo}, currentUser.id=${currentUser?.id}`)}return match})}else if(this.currentTaskView==="pending"){filteredTasks=this.tasks.filter(task=>task.status!=="completed")}if(filteredTasks.length===0){tasksList.innerHTML=this.getEmptyTasksHTML();return}const tasksHTML=filteredTasks.map(task=>this.renderTask(task)).join("");tasksList.innerHTML=tasksHTML;filteredTasks.forEach(task=>{this.updateTimerDisplay(task.id)})};window.showTab=function(tabName){document.querySelectorAll(".nav-tab").forEach(tab=>{tab.classList.remove("active")});document.querySelectorAll(".tab-content").forEach(content=>{content.classList.remove("active")});const clickedTab=document.querySelector(`[data-tab="${tabName}"]`);if(clickedTab){clickedTab.classList.add("active")}const content=document.getElementById(tabName);if(content){content.classList.add("active")}if(tabName==="tasks"&&window.taskManager){window.taskManager.loadTasks()}else if(tabName==="team"&&window.taskManager){window.taskManager.loadUsers()}else if(tabName==="reports"){fetchAndRenderReports()}};window.openCreateTaskModal=function(){if(window.taskManager){window.taskManager.openTaskModal()}};window.closeTaskModal=function(){if(window.taskManager){window.taskManager.closeTaskModal()}};window.filterTasks=function(){if(window.taskManager){window.taskManager.filterTasks()}};window.searchTasks=function(){if(window.taskManager){window.taskManager.searchTasks()}};window.refreshDashboard=function(){if(window.taskManager){window.taskManager.refreshAll()}};window.showNotification=function(message,type="info"){const container=document.getElementById("notificationContainer");if(!container)return;const notification=document.createElement("div");notification.className=`notification ${type}`;notification.textContent=message;notification.addEventListener("click",()=>{notification.remove()});container.appendChild(notification);setTimeout(()=>{if(notification.parentNode){notification.remove()}},5e3)};window.formatDate=function(dateString){if(!dateString)return"No date";const date=new Date(dateString);const now=new Date;const diffTime=Math.abs(now-date);const diffDays=Math.ceil(diffTime/(1e3*60*60*24));if(diffDays===0){return"Today"}else if(diffDays===1){return date<now?"Yesterday":"Tomorrow"}else if(diffDays<7){return`${diffDays} days ${date<now?"ago":"away"}`}else{return date.toLocaleDateString()}};window.formatDuration=function(minutes){if(!minutes)return"0m";const hours=Math.floor(minutes/60);const mins=minutes%60;if(hours===0){return`${mins}m`}else if(mins===0){return`${hours}h`}else{return`${hours}h ${mins}m`}};let taskStatsChartInstance=null;let userProductivityChartInstance=null;async function fetchAndRenderReports(){const startDate=document.getElementById("reportStartDate").value;const endDate=document.getElementById("reportEndDate").value;const params=[];if(startDate)params.push(`startDate=${encodeURIComponent(startDate)}`);if(endDate)params.push(`endDate=${encodeURIComponent(endDate)}`);const query=params.length?`?${params.join("&")}`:"";try{const overviewStats=await window.api.request(`/reports/overview-stats${query}`);renderOverviewStats(overviewStats)}catch(error){console.error("Failed to load overview stats:",error);renderOverviewStats({total_tasks:0,completed_tasks:0,avg_completion_hours:0,completion_rate:0})}try{const taskStats=await window.api.request(`/reports/task-stats${query}`);renderTaskStatsChart(taskStats)}catch(error){console.error("Failed to load task statistics:",error);renderTaskStatsChart({completed:0,pending:0,in_progress:0,cancelled:0})}try{const priorityStats=await window.api.request(`/reports/priority-stats${query}`);renderPriorityStatsChart(priorityStats)}catch(error){console.error("Failed to load priority stats:",error);renderPriorityStatsChart([])}try{const userProductivity=await window.api.request(`/reports/user-productivity${query}`);renderUserProductivityChart(userProductivity)}catch(error){console.error("Failed to load user productivity:",error);renderUserProductivityChart([])}try{const timeTracking=await window.api.request(`/reports/time-tracking${query}`);renderTimeTracking(timeTracking)}catch(error){console.error("Failed to load time tracking:",error);renderTimeTracking([])}try{const completionTrend=await window.api.request(`/reports/completion-trend${query}`);renderCompletionTrend(completionTrend)}catch(error){console.error("Failed to load completion trend:",error);renderCompletionTrend([])}try{const categoryStats=await window.api.request(`/reports/category-stats${query}`);renderCategoryChart(categoryStats)}catch(error){console.error("Failed to load category stats:",error);renderCategoryChart([])}try{const overdueTasks=await window.api.request(`/reports/overdue-tasks`);renderOverdueTasks(overdueTasks)}catch(error){console.error("Failed to load overdue tasks:",error);renderOverdueTasks([])}}function renderOverviewStats(stats){const elements={analyticsTotal:document.getElementById("analyticsTotal"),analyticsCompleted:document.getElementById("analyticsCompleted"),analyticsAvgTime:document.getElementById("analyticsAvgTime"),analyticsCompletionRate:document.getElementById("analyticsCompletionRate")};if(elements.analyticsTotal){elements.analyticsTotal.textContent=stats.total_tasks||0}if(elements.analyticsCompleted){elements.analyticsCompleted.textContent=stats.completed_tasks||0}if(elements.analyticsAvgTime){elements.analyticsAvgTime.textContent=stats.avg_completion_hours?`${stats.avg_completion_hours}h`:"0h"}if(elements.analyticsCompletionRate){elements.analyticsCompletionRate.textContent=stats.completion_rate?`${stats.completion_rate}%`:"0%"}Object.values(elements).forEach(el=>{if(el){el.classList.add("animate-pulse");setTimeout(()=>el.classList.remove("animate-pulse"),1e3)}})}function renderTaskStatsChart(stats){const container=document.getElementById("taskStatsChart");if(!container)return;container.innerHTML='<canvas id="taskStatsCanvas" height="120"></canvas>';const ctx=document.getElementById("taskStatsCanvas").getContext("2d");if(taskStatsChartInstance)taskStatsChartInstance.destroy();taskStatsChartInstance=new Chart(ctx,{type:"doughnut",data:{labels:["Completed","Pending","In Progress","Cancelled"],datasets:[{data:[stats.completed,stats.pending,stats.in_progress,stats.cancelled],backgroundColor:["#4caf50","#ff9800","#2196f3","#f44336"],borderWidth:2,borderColor:"#ffffff"}]},options:{responsive:true,plugins:{legend:{position:"bottom",labels:{padding:20,usePointStyle:true}}}}})}function renderPriorityStatsChart(data){const container=document.getElementById("priorityStatsChart");if(!container)return;container.innerHTML='<canvas id="priorityStatsCanvas" height="120"></canvas>';const ctx=document.getElementById("priorityStatsCanvas").getContext("2d");const chart=new Chart(ctx,{type:"bar",data:{labels:data.map(item=>item.priority.charAt(0).toUpperCase()+item.priority.slice(1)),datasets:[{label:"Total",data:data.map(item=>item.total),backgroundColor:data.map(item=>{switch(item.priority){case"critical":return"#9c27b0";case"high":return"#f44336";case"medium":return"#ff9800";case"low":return"#4caf50";case"lowest":return"#2196f3";default:return"#9e9e9e"}})}]},options:{responsive:true,plugins:{legend:{display:false}},scales:{y:{beginAtZero:true}}}})}function renderUserProductivityChart(data){const container=document.getElementById("userProductivityTable");if(!container)return;if(data.length===0){container.innerHTML='<div class="empty-state"><p>No productivity data available</p></div>';return}container.innerHTML='<canvas id="userProductivityCanvas" height="120"></canvas>';const ctx=document.getElementById("userProductivityCanvas").getContext("2d");if(userProductivityChartInstance)userProductivityChartInstance.destroy();userProductivityChartInstance=new Chart(ctx,{type:"bar",data:{labels:data.map(u=>u.full_name||u.username),datasets:[{label:"Completed Tasks",data:data.map(u=>u.completed_tasks),backgroundColor:"#4caf50"},{label:"Total Time (hours)",data:data.map(u=>Math.round(u.total_minutes/60)),backgroundColor:"#2196f3"}]},options:{responsive:true,scales:{y:{beginAtZero:true}}}})}function renderTimeTracking(data){const container=document.getElementById("timeTrackingTable");if(!container)return;if(data.length===0){container.innerHTML='<div class="empty-state"><p>No time tracking data available</p></div>';return}let html=`<table class="report-table">\n        <thead>\n            <tr>\n                <th>User</th>\n                <th>Task</th>\n                <th>Entries</th>\n                <th>Total Time</th>\n                <th>Avg Time</th>\n            </tr>\n        </thead>\n        <tbody>`;data.forEach(row=>{const totalHours=Math.floor(row.total_minutes/60);const totalMins=row.total_minutes%60;const avgHours=Math.floor(row.avg_minutes/60);const avgMins=Math.round(row.avg_minutes%60);html+=`<tr>\n            <td>${row.username}</td>\n            <td>${row.title||"-"}</td>\n            <td>${row.entries}</td>\n            <td>${totalHours}h ${totalMins}m</td>\n            <td>${avgHours}h ${avgMins}m</td>\n        </tr>`});html+="</tbody></table>";container.innerHTML=html}function renderCompletionTrend(data){const container=document.getElementById("trendChart");if(!container)return;container.innerHTML='<canvas id="trendCanvas" height="120"></canvas>';const ctx=document.getElementById("trendCanvas").getContext("2d");const chart=new Chart(ctx,{type:"line",data:{labels:data.map(item=>new Date(item.date).toLocaleDateString()),datasets:[{label:"Tasks Completed",data:data.map(item=>item.completed_tasks),borderColor:"#4caf50",backgroundColor:"rgba(76, 175, 80, 0.1)",fill:true,tension:.4}]},options:{responsive:true,scales:{y:{beginAtZero:true}}}})}function renderCategoryChart(data){const container=document.getElementById("categoryChart");if(!container)return;container.innerHTML='<canvas id="categoryCanvas" height="120"></canvas>';const ctx=document.getElementById("categoryCanvas").getContext("2d");const chart=new Chart(ctx,{type:"bar",data:{labels:data.map(item=>item.category.charAt(0).toUpperCase()+item.category.slice(1)),datasets:[{label:"Total Tasks",data:data.map(item=>item.total),backgroundColor:"#2196f3"},{label:"Completed",data:data.map(item=>item.completed),backgroundColor:"#4caf50"}]},options:{responsive:true,scales:{y:{beginAtZero:true}}}})}function renderOverdueTasks(data){const container=document.getElementById("overdueTasksList");if(!container)return;if(data.length===0){container.innerHTML='<div class="empty-state"><p>üéâ No overdue tasks!</p></div>';return}let html="";data.forEach(task=>{const priorityClass=task.priority||"medium";const daysOverdue=Math.floor(task.days_overdue);html+=`<div class="alert-item">\n            <div class="alert-item-content">\n                <div class="alert-item-title">\n                    <span class="priority-indicator ${priorityClass}"></span>\n                    ${task.title}\n                </div>\n                <div class="alert-item-meta">\n                    Assigned to: ${task.assigned_to_name||"Unassigned"} | \n                    Due: ${new Date(task.due_date).toLocaleDateString()} | \n                    Overdue by: ${daysOverdue} days\n                </div>\n            </div>\n            <div class="alert-item-actions">\n                <button class="btn btn-small btn-primary" onclick="taskManager.editTask(${task.id})">\n                    Edit\n                </button>\n            </div>\n        </div>`});container.innerHTML=html}function setupReportsEventListeners(){const applyFiltersBtn=document.getElementById("applyReportFilters");if(applyFiltersBtn){applyFiltersBtn.addEventListener("click",fetchAndRenderReports)}const resetFiltersBtn=document.getElementById("resetReportFilters");if(resetFiltersBtn){resetFiltersBtn.addEventListener("click",()=>{document.getElementById("reportStartDate").value="";document.getElementById("reportEndDate").value="";fetchAndRenderReports()})}const exportCSVBtn=document.getElementById("exportCSV");if(exportCSVBtn){exportCSVBtn.addEventListener("click",()=>exportReport("csv"))}const exportPDFBtn=document.getElementById("exportPDF");if(exportPDFBtn){exportPDFBtn.addEventListener("click",()=>exportReport("pdf"))}}async function exportReport(format){try{const startDate=document.getElementById("reportStartDate").value;const endDate=document.getElementById("reportEndDate").value;const params=new URLSearchParams;params.append("type",format);params.append("report","task-stats");if(startDate)params.append("startDate",startDate);if(endDate)params.append("endDate",endDate);const response=await fetch(`/api/reports/export?${params}`,{method:"GET",headers:{Authorization:`Bearer ${window.authManager.getToken()}`}});if(!response.ok){throw new Error(`Export failed: ${response.statusText}`)}const blob=await response.blob();const url=window.URL.createObjectURL(blob);const a=document.createElement("a");a.href=url;a.download=`task-report-${(new Date).toISOString().split("T")[0]}.${format}`;document.body.appendChild(a);a.click();document.body.removeChild(a);window.URL.revokeObjectURL(url);showNotification(`Report exported successfully as ${format.toUpperCase()}!`,"success")}catch(error){console.error("Export error:",error);showNotification("Failed to export report. Please try again.","error")}}document.addEventListener("DOMContentLoaded",()=>{console.log("üåü TaskFlow application starting...");if(!window.authManager){window.authManager=new AuthManager}window.taskManager=new TaskManager;if(window.authManager&&window.authManager.isAuthenticated()){window.taskManager.init()}window.addEventListener("authTokenChanged",event=>{if(event.detail.token){window.taskManager.init()}else{if(window.taskManager){window.taskManager.destroy()}}});setupReportsEventListeners();setTimeout(()=>{if(window.authManager){window.authManager.hideLoadingScreen()}},1500)});document.addEventListener("visibilitychange",()=>{if(document.visibilityState==="visible"&&window.taskManager&&window.authManager.isAuthenticated()){window.taskManager.loadDashboardStats()}});window.addEventListener("beforeunload",()=>{if(window.taskManager){window.taskManager.destroy()}});if("serviceWorker"in navigator){window.addEventListener("load",()=>{navigator.serviceWorker.register("/sw.js").then(registration=>{console.log("SW registered: ",registration)}).catch(registrationError=>{console.log("SW registration failed: ",registrationError)})})}if(typeof module!=="undefined"&&module.exports){module.exports={TaskManager:TaskManager}}